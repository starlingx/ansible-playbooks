---
#
# Copyright (c) 2020-2023 Wind River Systems, Inc.
#
# SPDX-License-Identifier: Apache-2.0
#

- name: Install Playbook
  hosts: all
  gather_facts: false
  become: no

  tasks:
    - set_fact:
        ansible_port: "{{ ansible_port | default(22) }}"
        boot_wait_time: "{{ boot_wait_time | default(600) }}"
        wait_for_timeout: "{{ wait_for_timeout | default(3600) }}"
        job_retry_delay: "{{ 120 | random }}"
        operation_string: "install"
        host_to_check: "{{ ansible_host }}"
        enroll_init: "{{ enroll_reconfigured_oam is defined }}"

    - name: Set facts for enroll_init
      set_fact:
        operation_string: "enroll-init"
        host_to_check: "{{ enroll_reconfigured_oam }}"
        boot_wait_time: "{{ enroll_boot_wait_time | default(150) }}"
      when: enroll_init

    # The following block is executed locally
    - block:
      - name: Run rvmc script
        script: >
          /usr/local/bin/rvmc_install.py
          --debug={{ rvmc_debug_level | default(0) }}
          --subcloud_name="{{ inventory_hostname }}"
          --config_file="{{ rvmc_config_file }}"
        # Script return code:
        # 0 - Success
        # 1 - Retryable failures
        # 2 - Non-retryable failures
        #     (eg. Invalid credentials, Script execution timeout in 30 minutes,
        #      Failed to terminate the previous process.)
        # Refer to rvmc_install.py in the distributedcloud repository for details.
        until: script_result.rc != 1
        register: script_result
        retries: 1
        delay: "{{ job_retry_delay }}"
        failed_when: false

      - name: Display script output
        debug:
          msg: "{{ script_result.stdout }}"

      # Block to isolate failure message
      - block:
        - name: Set credential failure flag
          set_fact:
            failure_msg: >-
              Credential failure.
              Action: Check BMC username and password in config file
          when: '"Action: Check BMC username and password in config file" in script_result.stdout'

        - name: Set output msg if BMC is unreachable.
          set_fact:
            failure_msg: >-
              Ping to BMC has failed.
              Check BMC values in install values file.
              Ensure you can ssh into BMC using these credentials.
              Err_code=ping_bmc
          when: '"Action: Check BMC ip address is pingable" in script_result.stdout'

        - name: Set output message if session creation fails
          set_fact:
            failure_msg: >-
              Failed to connect to BMC.
              Check BMC credentials in install values file.
              Ensure you can ssh into BMC using these credentials.
              Err_code=bmc_cred
          when: '"Failed to Create session" in script_result.stdout'

        - name: Set output message if the script execution times out
          set_fact:
            failure_msg: >-
              BMC operations timed out.
              Please review the script output to identify the operation
              that is currently stuck.
              Err_code=rvmc_timeout
          when: '"RVMC script execution timed out" in script_result.stdout'

        - name: Set output message if failed to terminate the previous RVMC process
          set_fact:
            failure_msg: >-
              Failed to terminate the previous RVMC process.
              Please review the script output to find out the previous
              RVMC process ID.
              Err_code=rvmc_process
          when: '"Failed to terminate the previous process" in script_result.stdout'

        - name: Fail if Redfish Virtual Media Controller returns an error
          fail:
            msg: |
              Failed to {{ operation_string }} the host via Redfish Virtual Media Controller.
              {{ failure_msg | default('The RVMC script exited with failure response or exception.') }}

        when: script_result.rc != 0

      delegate_to: localhost

    - debug:
        msg: "Waiting for the system to {{ operation_string }}..."

    - name: Waiting {{ wait_for_timeout }} seconds for port {{ ansible_port }} become open on {{ host_to_check }}
      local_action:
        module: wait_for
          port={{ ansible_port }}
          host={{ host_to_check }}
          delay={{ boot_wait_time }}
          timeout={{ wait_for_timeout }}
          state=started
          msg="Timeout waiting for {{ host_to_check }}:{{ ansible_port }}. Err_code=wait_{{ operation_string }}"

- name: Run validate host playbook post install
  import_playbook: validate_host.yml
  vars:
    check_system: true
    check_load: false
    check_bootstrap_address: false
    check_patches: false
    sync_patch_metadata: true
    enforce_password_change: true
  when: not enroll_init
