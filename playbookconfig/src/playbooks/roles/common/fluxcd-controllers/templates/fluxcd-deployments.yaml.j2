apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    control-plane: controller
  name: helm-controller
  namespace: flux-helm
spec:
  replicas: 1
  selector:
    matchLabels:
      app: helm-controller
  template:
    metadata:
      annotations:
        prometheus.io/port: "8080"
        prometheus.io/scrape: "true"
      labels:
        app: helm-controller
        app.starlingx.io/component: platform
    spec:
      containers:
      - name: manager
        command: ["/bin/sh"]
        args: ["-c", "helm-controller --watch-all-namespaces --log-level=debug --log-encoding=console --graceful-shutdown-timeout=10s --enable-leader-election 2>&1 | tee -a /var/log/helm-controller.log"]
        env:
        - name: RUNTIME_NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        - name: GOMAXPROCS
          valueFrom:
            resourceFieldRef:
              containerName: manager
              resource: limits.cpu
        - name: GOMEMLIMIT
          valueFrom:
            resourceFieldRef:
              containerName: manager
              resource: limits.memory
        image: "{{ local_registry }}/{{ flux_helm_controller_img }}"
        imagePullPolicy: IfNotPresent
        livenessProbe:
          httpGet:
            path: /healthz
            port: healthz
          timeoutSeconds: {{ flux_helm_controller_liveness_timeout }}
        ports:
        - containerPort: 8080
          name: http-prom
          protocol: TCP
        - containerPort: 9440
          name: healthz
          protocol: TCP
        readinessProbe:
          httpGet:
            path: /readyz
            port: healthz
          timeoutSeconds: {{ flux_helm_controller_readiness_timeout }}
        resources:
          limits:
            cpu: 1000m
            memory: 1Gi
          requests:
            cpu: 0
            memory: 64Mi
        securityContext:
          allowPrivilegeEscalation: false
          capabilities:
            drop:
            - ALL
          readOnlyRootFilesystem: true
          runAsNonRoot: true
          seccompProfile:
            type: RuntimeDefault
        volumeMounts:
        - mountPath: /tmp
          name: temp
        - mountPath: /var/log
          name: log-volume
      imagePullSecrets:
        - name: default-registry-key
      nodeSelector:
        node-role.kubernetes.io/control-plane: ""
      tolerations:
        - key: "node-role.kubernetes.io/master"
          operator: "Exists"
          effect: "NoSchedule"
        - key: "node-role.kubernetes.io/control-plane"
          operator: "Exists"
          effect: "NoSchedule"
      terminationGracePeriodSeconds: 10
      volumes:
      - emptyDir: {}
        name: temp
      - name: log-volume
        hostPath:
          path: /var/log/flux
          type: Directory
---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    control-plane: controller
  name: source-controller
  namespace: flux-helm
spec:
  replicas: 1
  selector:
    matchLabels:
      app: source-controller
  strategy:
    type: Recreate
  template:
    metadata:
      annotations:
        prometheus.io/port: "8080"
        prometheus.io/scrape: "true"
      labels:
        app: source-controller
        app.starlingx.io/component: platform
    spec:
      containers:
      - name: manager
        command: ["/bin/sh"]
        args: ["-c", "source-controller  --watch-all-namespaces --log-level=debug --log-encoding=console --enable-leader-election --storage-path=/data --storage-adv-addr=source-controller.$(RUNTIME_NAMESPACE).svc.cluster.local. 2>&1 | tee -a /var/log/source-controller.log"]
        env:
        - name: RUNTIME_NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        - name: TUF_ROOT
          value: /tmp/.sigstore
        - name: GOMAXPROCS
          valueFrom:
            resourceFieldRef:
              containerName: manager
              resource: limits.cpu
        - name: GOMEMLIMIT
          valueFrom:
            resourceFieldRef:
              containerName: manager
              resource: limits.memory
        image: "{{ local_registry }}/{{ flux_source_controller_img }}"
        imagePullPolicy: IfNotPresent
        livenessProbe:
          httpGet:
            path: /healthz
            port: healthz
          timeoutSeconds: {{ flux_source_controller_liveness_timeout }}
        ports:
        - containerPort: 9090
          name: http
          protocol: TCP
        - containerPort: 8080
          name: http-prom
          protocol: TCP
        - containerPort: 9440
          name: healthz
          protocol: TCP
        readinessProbe:
          httpGet:
            path: /
            port: http
          timeoutSeconds: {{ flux_source_controller_readiness_timeout }}
        resources:
          limits:
            cpu: 1000m
            memory: 1Gi
          requests:
            cpu: 0
            memory: 64Mi
        securityContext:
          allowPrivilegeEscalation: false
          capabilities:
            drop:
            - ALL
          readOnlyRootFilesystem: true
          runAsNonRoot: true
          seccompProfile:
            type: RuntimeDefault
        volumeMounts:
        - mountPath: /data
          name: data
        - mountPath: /tmp
          name: tmp
        - mountPath: /var/log
          name: log-volume
      imagePullSecrets:
        - name: default-registry-key
      nodeSelector:
        node-role.kubernetes.io/control-plane: ""
      tolerations:
        - key: "node-role.kubernetes.io/master"
          operator: "Exists"
          effect: "NoSchedule"
        - key: "node-role.kubernetes.io/control-plane"
          operator: "Exists"
          effect: "NoSchedule"
      priorityClassName: system-cluster-critical
      securityContext:
        fsGroup: 1337
      serviceAccountName: default
      terminationGracePeriodSeconds: 10
      volumes:
      - emptyDir: {}
        name: data
      - emptyDir: {}
        name: tmp
      - name: log-volume
        hostPath:
          path: /var/log/flux
          type: Directory