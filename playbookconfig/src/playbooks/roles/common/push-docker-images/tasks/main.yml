---
#
# Copyright (c) 2019-2025 Wind River Systems, Inc.
#
# SPDX-License-Identifier: Apache-2.0
#
# ROLE DESCRIPTION:
#   This role is to perform tasks that download container images
#   from public/private registries and push to local registry.
#

- name: Set default values for docker_http_proxy and docker_https_proxy if they are undefined
  set_fact:
    docker_http_proxy: "{{ docker_http_proxy|default('') }}"
    docker_https_proxy: "{{ docker_https_proxy|default('') }}"

- name: Set default value for add_docker_prefix if it is undefined
  set_fact:
    add_docker_prefix: "{{ add_docker_prefix|default('no') }}"

- name: Get docker registries if not in bootstap or restore mode
  include: get_docker_registry.yml registry={{ item }}
  with_items:
    - { name: 'k8s_registry', value: { url: 'k8s.gcr.io' } }
    - { name: 'gcr_registry', value: { url: 'gcr.io' } }
    - { name: 'quay_registry', value: { url: 'quay.io' } }
    - { name: 'docker_registry', value: { url: 'docker.io' } }
    - { name: 'elastic_registry', value: { url: 'docker.elastic.co' } }
    - { name: 'ghcr_registry', value: { url: 'ghcr.io' } }
    - { name: 'registryk8s_registry', value: { url: 'registry.k8s.io' } }
    - { name: 'icr_registry', value: { url: 'icr.io' } }
  when: mode is regex("^upgrade_") or
        mode == 'trident_install'

# During a restore/upgrade docker registry information will not be in facts.
# Instead this information will be pulled from the platform backup.
# Obtaining the values from the backup is significantly faster than getting them
# from sysinv and barbican.
- name: Retrieve configured docker registries during upgrades
  import_tasks:
    file: restore_docker_registries.yml
  when:
    - mode | default(none) == 'restore'
    - restore_mode | default(none) == 'optimized'

# Disable the log to not expose registry password
- name: Get registry credentials if registry type is AWS ECR
  include: get_aws_ecr_credentials.yml registry={{ item }}
  with_items:
    - { name: "k8s_registry", value: "{{ k8s_registry }}" }
    - { name: "gcr_registry", value: "{{ gcr_registry }}" }
    - { name: "quay_registry", value: "{{ quay_registry }}" }
    - { name: "docker_registry", value: "{{ docker_registry }}" }
    - { name: "elastic_registry", value: "{{ elastic_registry }}" }
    - { name: "ghcr_registry", value: "{{ ghcr_registry }}" }
    - { name: "registryk8s_registry", value: "{{ registryk8s_registry }}" }
    - { name: "icr_registry", value: "{{ icr_registry }}" }
  when: registry.value.type is defined and
        registry.value.type == 'aws-ecr'
  no_log: true

- name: Get platform images information
  import_role:
    name: common/load-images-information

# Download all system images and additional images if bootstrap or restore
- name: Set download images list
  set_fact:
    download_images_list:
      "{{ (kubernetes_images + networking_images + static_images + storage_images + security_images +
           additional_local_registry_images)
      if (additional_local_registry_images is defined and additional_local_registry_images|length > 0)
      else (kubernetes_images + networking_images + static_images + storage_images + security_images) }}"
  when: mode == 'bootstrap' or
        mode == 'restore'

# Download general and security specific static images if static images upgrade
- name: Set download images list to static images (both general and security specific) if upgrading platform
  set_fact:
    download_images_list: "{{ download_images_list|default([]) + static_images + security_images }}"
  when: mode == 'upgrade_static_images'

# We only want fluxcd images for fluxcd upgrades, but can live with a broader
# target for the sake of keeping it variable definitions contained to
# a variable: static_images
#
# Also as a workaround for https://bugs.launchpad.net/starlingx/+bug/1999182, mimic
# contents of upgrade_static_images.
# This would make sure during upgrade-activate step that the images for upgrade_static_images
# are present
- name: Set download images list to static images for FluxCD image upgrade
  set_fact:
    download_images_list: "{{ download_images_list|default([]) + static_images + security_images }}"
  when: mode == 'upgrade_fluxcd_images'

# Only download k8s networking images if k8s networking upgrade
- name: Set download images list to k8s network images if upgrading k8s networking
  set_fact:
    download_images_list: "{{ download_images_list|default([]) + networking_images }}"
  when: mode == 'upgrade_k8s_networking'

# Only download k8s storage images if k8s storage upgrade
- name: Set download images list to k8s storage images if upgrading k8s storage
  set_fact:
    download_images_list: "{{ download_images_list|default([]) + storage_images }}"
  when: mode == 'upgrade_k8s_storage'

# Only download kubernetes images if kubernetes upgrade
- name: Set download images list to kubernetes images if upgrading kubernetes
  set_fact:
    download_images_list: "{{ download_images_list|default([]) + kubernetes_images }}"
  when: mode == 'upgrade_kubernetes'

- name: Set download images list to netapp images if installing trident
  set_fact:
    download_images_list: "{{ download_images_list|default([]) + trident_images + storage_images }}"
  when: mode == 'trident_install'

- name: Append restore images for redownload if found
  set_fact:
    download_images_list: "{{ download_images_list + backed_up_local_registry_images }}"
  when: backed_up_local_registry_images is defined

# Pruning empty strings from the list as some images may not be relevant to a given k8s version
# e.g. calico_flexvol_img for k8s 1.24.4
- name: Prune any empty string from download images list
  set_fact:
    download_images_list: "{{ download_images_list | select() | unique }}"

- name: Set registries information
  set_fact:
    registries:
      "{{ (registries|default({})) | combine({item.default_url:item.replaced_url}, recursive=true)}}"
  with_items:
    - { default_url: 'k8s.gcr.io', replaced_url: "{{ k8s_registry.url }}" }
    - { default_url: 'gcr.io', replaced_url: "{{ gcr_registry.url }}" }
    - { default_url: 'quay.io', replaced_url: "{{ quay_registry.url }}" }
    - { default_url: 'docker.io', replaced_url: "{{ docker_registry.url }}" }
    - { default_url: 'docker.elastic.co', replaced_url: "{{ elastic_registry.url }}" }
    - { default_url: 'ghcr.io', replaced_url: "{{ ghcr_registry.url }}" }
    - { default_url: 'registry.k8s.io', replaced_url: "{{ registryk8s_registry.url }}" }
    - { default_url: 'icr.io', replaced_url: "{{ icr_registry.url }}" }

- block:
  # Disable the log to not expose registry password
  - name: Log in k8s, gcr, quay, ghcr, registryk8s, icr docker registries if credentials exist
    docker_login:
      registry: "{{ item['url'] }}"
      username: "{{ item['username'] }}"
      password: "{{ item['password'] }}"
    register: login_result
    retries: 10
    delay: 5
    until: login_result is succeeded
    with_items:
      - "{{ k8s_registry }}"
      - "{{ gcr_registry }}"
      - "{{ quay_registry }}"
      - "{{ docker_registry }}"
      - "{{ ghcr_registry }}"
      - "{{ registryk8s_registry }}"
      - "{{ icr_registry }}"
    when: item.username is defined
    no_log: true
    failed_when: false

  - name: Initialize registry login error variable
    set_fact:
      error_value: ""

  # log specific information keeping no_log true to avoid show passwords
  - name: Set login error value if it failed to log in one of the configured registries
    set_fact:
      error_value: "{{ error_value + '|' + item.msg }}"
    when: 'item.msg is defined and "Error" in item.msg'
    loop: "{{ login_result.results }}"
    no_log: true

  - name: Display registry login error
    fail:
      msg:
        - "Failed to log in one of the registry. Please check if docker_registries parameter"
        - "is properly configured in bootstrap overrides yaml file and docker registry certificate (where "
        - "applicable) is valid."
        - "Err_code= images_download_failure"
        - "Possible failures: {{ error_value }}"
    when: error_value != ""

  when: not skip_registry_login

# Retrieve local registry credentials unless it has been already
- block:
  - name: Get local registry credentials
    vars:
      script_content: |
        import keyring
        password = keyring.get_password("sysinv", "services")
        if not password:
            raise Exception("Local registry password not found.")
        print(dict(username='sysinv', password=str(password)))
    shell: "{{ script_content }}"
    args:
      executable: /usr/bin/python
    register: local_registry_credentials_output

  - set_fact:
      local_registry_credentials: "{{ local_registry_credentials_output.stdout }}"
  when: local_registry_credentials is not defined

- set_fact:
    download_images_task_name: "Download images and push to local registry"

- block:
  # Save the original add_docker_prefix flag as it will be updated
  # during 'Load images from archives' step based on the type of
  # image bundle (platform or custom).
  - name: Save the original add_docker_prefix setting
    set_fact:
      add_docker_prefix_orig: "{{ add_docker_prefix }}"

  - name: Retrieve system virtual info
    command: facter virtual
    register: virtual_type

  - name: Load images from archives if configured
    include: load_images_from_archive.yml input_archive={{ item.path }}
    with_items: "{{ images_archive_files }}"
    when: images_archive_exists

  - set_fact:
      download_images_task_name: "Download any missing images and push to local registry"

  - name: Clear alarm if exists
    script: fm_alarm_set_clear.py "--clear"
    register: alarm_result
    failed_when: false

  - name: Remove imported images from download_images_list
    set_fact:
      download_images_list: "{{ download_images_list | difference(imported_images_list) }}"
    when: imported_images_list is defined

  - name: Restore the original add_docker_prefix setting
    set_fact:
      add_docker_prefix: "{{ add_docker_prefix_orig }}"

  - debug: var=imported_images_list

  rescue:
  - name: Raise alarm with push_docker failed
    script: fm_alarm_set_clear.py "--set"
    register: alarm_result
    failed_when: false

  - name: Force fail when error occurs
    fail:
      msg: "An error occurred while loading images from archive to local registry."

  when: images_archive_exists | default(false)

- debug: var=download_images_list

- block:
  - set_fact:
      download_images: "{{ download_images_list | join(',') }}"
      use_multiprocessing: "{{ download_images_use_multiprocessing | default(false) | bool }}"

  - block:
    - name: "{{ download_images_task_name }} - multiprocessing disabled"
      script: download_images.py {{ download_images }}
      register: download_images_output
      retries: 10
      delay: 5
      until: (download_images_output.rc == 0 or "HARD FAIL" in download_images_output.stdout)
      failed_when: download_images_output.rc != 0
      environment:
        REGISTRIES: "{{ registries | to_json }}"
        ADD_DOCKER_PREFIX: "{{ add_docker_prefix }}"
        CRICTL_CACHE_IMAGES: "{{ crictl_image_cache_list|default(None) }}"

    - debug:
        msg: "{{ download_images_output.stdout_lines }}"

    when: not use_multiprocessing | bool

  - block:
      - name: "{{ download_images_task_name }} - multiprocessing enabled"
        script: download_images.py {{ download_images }}
        register: download_images_output
        failed_when: download_images_output.rc != 0
        environment:
          REGISTRIES: "{{ registries | to_json }}"
          ADD_DOCKER_PREFIX: "{{ add_docker_prefix }}"
          CRICTL_CACHE_IMAGES: "{{ crictl_image_cache_list|default(None) }}"
          USE_MULTIPROCESSING: "1"

    rescue:
      - name: "{{ download_images_task_name }} - multiprocessing fallback"
        script: download_images.py {{ download_images }}
        register: download_images_output
        retries: 9
        delay: 5
        until: (download_images_output.rc == 0 or "HARD FAIL" in download_images_output.stdout)
        failed_when: download_images_output.rc != 0
        environment:
          REGISTRIES: "{{ registries | to_json }}"
          ADD_DOCKER_PREFIX: "{{ add_docker_prefix }}"
          CRICTL_CACHE_IMAGES: "{{ crictl_image_cache_list|default(None) }}"

    always:
      - debug:
          msg: "{{ download_images_output.stdout_lines }}"

    when: use_multiprocessing | bool

  when: download_images_list|length > 0

# Disable the log to not expose registry password
- name: Log out of k8s, gcr, quay, ghcr, registryk8s, icr docker registries if credentials exist
  docker_login:
    registry: "{{ item['url'] }}"
    state: absent
  with_items:
    - "{{ k8s_registry }}"
    - "{{ gcr_registry }}"
    - "{{ quay_registry }}"
    - "{{ docker_registry }}"
    - "{{ ghcr_registry }}"
    - "{{ registryk8s_registry }}"
    - "{{ icr_registry }}"
  when: item.username is defined and not skip_registry_login
  no_log: true
