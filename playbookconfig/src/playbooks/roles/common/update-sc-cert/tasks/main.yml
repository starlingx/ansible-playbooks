---
#
# Copyright (c) 2021-2023 Wind River Systems, Inc.
#
# SPDX-License-Identifier: Apache-2.0
#
# ROLE DESCRIPTION:
#   This role updates the certificates for https enabled admin endpoints
#   on a subcloud
#

- name: Get system current time before updating certs
  shell: START_TIME=$(date +%s); echo $START_TIME
  register: start_time

# Update the certificate in the config directory to update the hieradata when
# triggering the runtime manifest
- name: Update DC admin endpoint root CA certificate in config permdir
  copy:
    dest: "{{ config_permdir }}/{{ dc_adminep_root_ca_cert }}"
    content: "{{ dc_root_ca_cert | b64decode }}"
    mode: 0400
  become: yes

- name: Get sc_adminep_ca_cert namespaces
  shell: >-
    kubectl --kubeconfig=/etc/kubernetes/admin.conf get namespaces |
    awk '/{{ sc_adminep_ca_cert_ns }}/{print$1}'
  register: get_sc_adminep_ca_cert_ns

- name: Remove sc-cert namespace if exists
  command: >-
    kubectl --kubeconfig=/etc/kubernetes/admin.conf delete ns
    "{{ sc_adminep_ca_cert_ns }}"
  when: get_sc_adminep_ca_cert_ns.stdout != ""

- name: Set up subcloud admin endpoints certificates
  import_role:
    name: common/setup-subcloud-adminep-certs
  vars:
    ansible_become: yes

- block:
  - name: Get admin endpoint certificate
    shell: >-
      kubectl --kubeconfig=/etc/kubernetes/admin.conf get secret
      sc-adminep-certificate -n sc-cert
      -o jsonpath='{.data.tls\.key}{.data.tls\.crt}'
      | base64 -d
    register: get_admin_ep_cert

  - name: Create DC admin endpoint root CA certificate
    copy:
      dest: "/etc/ssl/private/{{ sc_adminep_cert }}"
      content: "{{ get_admin_ep_cert.stdout }}"
      mode: 0400
  when: mode is defined and mode == "enroll"

- block:
  - name: Check admin-ep-cert.pem updated
    command: stat -c %Y "/etc/ssl/private/{{ sc_adminep_cert }}"
    register: adminep_cert_modify_time
    until: adminep_cert_modify_time.stdout|int > (start_time.stdout|int + 1)
    retries: 63
    delay: 10

  - name: Check haproxy service restarted
    shell: >-
      date --date="$(ps -p $(ps -eo pid,cmd | grep haproxy |
      awk 'NR==1{print $1}') -o lstart=)" '+%s'
    register: haproxy_start_time
    until: haproxy_start_time.stdout > start_time.stdout
    retries: 6
    delay: 10

  - name: Check manifest applied and alarm cleared
    shell: |
      source /etc/platform/openrc;
      fm alarm-list --query alarm_id=250.001
    register: alarm_count
    retries: 6
    delay: 30
    until: alarm_count.stdout == ""
    # set as false to allow for a better error message in the fail task below
    failed_when: false

  - name: Failed when the manifest apply times out
    fail:
      msg: >-
        Timed out to update DC subcloud cert. Check the cert-mon.log on the
        subcloud controller for the reason.
    when: alarm_count.stdout != ""

  when: mode is not defined or mode != "enroll"

- name: Restart sysinv-conductor
  command: sm-restart service sysinv-conductor
  become: yes

- name: Check sysinv-conductor related services enabled
  shell: sm-query service '{{ item }}' | grep -c enabled-active
  loop:
    - "sysinv-inv"
    - "cert-mon"
    - "cert-alarm"
    - "sysinv-conductor"
  register: service_status
  until: service_status.stdout == '1'
  retries: 30
  delay: 10
