---
#
# Copyright (c) 2024-2025 Wind River Systems, Inc.
#
# SPDX-License-Identifier: Apache-2.0
#   This role applies software updates (release deployment) on a
#   target host using USM local installation. Key steps include:
#     - Execute USM local installation CLI procedure to deploy patches
#       - RUN Software [install-local, upload, precheck]
#       - RUN Software deploy [precheck, start, host, activate, complete,
#         delete]
#       * For each deploy command, periodically execute deploy show to
#         validate state and ensure the step completes before proceeding
#       * For RR: Lock the controller before deploy host and unlock after
#         deploy host
#


# TODO(srana): Running source /etc/platform/openrc for each command could be time
# consuming due to the keyring lookup. We should look into optimizing this.
- name: Enable local installation mode
  shell: |
    {{ source_env_command }}
    software install-local

- name: Software upload patches
  shell: |
    {{ source_env_command }}
    software upload "{{ patches_dir }}/{{ item }}"
  with_items: "{{ patches }}"

- block:
  - name: Deploy precheck
    shell: |
      {{ source_env_command }}
      software deploy precheck "{{ target_release_id }}"
    register: deploy_pre_check
    retries: 10
    delay: 30
    until: deploy_pre_check.rc == 0
    failed_when: false

  - name: Fail if deploy precheck failed
    fail:
      msg: |
        Deploy precheck failed
        {{ deploy_pre_check.stdout }}
    when: deploy_pre_check.rc != 0
  when: not enrollment_in_progress | default(false)

- name: Set 'force' option
  set_fact:
    force: "--force"
  when:
    - enrollment_in_progress | default(false)
    - system_mode is defined
    - system_mode != "simplex"

- name: Deploy start
  shell: |
    {{ source_env_command }}
    software deploy start {{ cli_confirmation | default('--yes') }} \
    {{ force | default('') }} {{ target_release_id }}

- name: Wait for deploy start
  shell: |
    {{ source_env_command }}
    software deploy show | grep "{{ target_sw_version }}" | awk '{print $8}'
  register: check_deploy_start
  retries: "{{ deploy_start_retries }}"
  delay: "{{ deploy_start_delay }}"
  until: >
    check_deploy_start.stdout == "deploy-start-done" or
    check_deploy_start.stdout == "deploy-start-failed"
  failed_when: false

- name: Fail if deploy start did not succeed
  fail:
    msg: |
      Deploy start failed or did not complete.
      Status: {{ check_deploy_start.stdout }}
      Expected Status: deploy-start-done
      {{ general_deploy_fail_message }}
  when: check_deploy_start.stdout != "deploy-start-done"

- name: Lock host if any patch is reboot required
  include_role:
    name: common/host-lock
  vars:
    target_host: 'controller-0'
  when: reboot_required

- name: Deploy host
  shell: |
    {{ source_env_command }}
    software deploy host controller-0 {{ cli_confirmation | default('--yes') }}

- name: Wait for deploy host
  shell: |
    {{ source_env_command }}
    software deploy show | grep "{{ target_sw_version }}" | awk '{print $8}'
  register: check_deploy_host
  retries: "{{ deploy_retries }}"
  delay: "{{ deploy_delay }}"
  until: >
    check_deploy_host.stdout == "deploy-host-done" or
    check_deploy_host.stdout == "deploy-host-failed"
  failed_when: false

- name: Fail if deploy host did not succeed
  fail:
    msg: |
      Deploy host failed or did not complete.
      Status: {{ check_deploy_host.stdout }}
      Expected Status: deploy-host-done
      {{ general_deploy_fail_message }}
  when: check_deploy_host.stdout != "deploy-host-done"

- name: Perform host unlock if reboot required
  include_role:
    name: common/host-unlock
  vars:
    target_host: 'controller-0'
    wait_for_unlock: true
  when: reboot_required

- name: Reload openrc credentials
  include_role:
    name: common/load-openrc
  when: mode is defined and mode == "enroll"

- name: Deploy activate
  shell: |
    {{ source_env_command }}
    software deploy activate {{ cli_confirmation | default('--yes') }}

- name: Wait for deploy activate
  shell: |
    {{ source_env_command }}
    software deploy show | grep "{{ target_sw_version }}" | awk '{print $8}'
  register: check_deploy_activate
  retries: "{{ deploy_retries }}"
  delay: "{{ deploy_delay }}"
  until: >
    check_deploy_activate.stdout == 'deploy-activate-done' or
    check_deploy_activate.stdout == 'deploy-activate-failed'
  failed_when: false

- name: Fail if deploy activate did not succeed
  fail:
    msg: |
      Deploy activate failed to start or did not complete.
      Status: {{ check_deploy_activate.stdout }}
      Expected Status: deploy-activate-done
      {{ general_deploy_fail_message }}
  when: check_deploy_activate.stdout != 'deploy-activate-done'

- name: Issue software deploy complete
  shell: |
    {{ source_env_command }}
    software deploy complete {{ cli_confirmation | default('--yes') }}

- name: Wait for deploy complete
  shell: |
    {{ source_env_command }}
    software deploy show | grep "{{ target_sw_version }}" | awk '{print $8}'
  register: check_deploy_complete
  retries: "{{ deploy_retries }}"
  delay: "{{ deploy_delay }}"
  until: >
    check_deploy_complete.stdout == "deploy-completed" or
    check_deploy_complete.stdout == "deploy-failed"
  failed_when: false

- name: Fail if deploy complete did not succeed
  fail:
    msg: |
      Deploy complete failed to start or did not complete.
      Status: {{ check_deploy_complete.stdout }}
      Expected Status: deploy-completed
      {{ general_deploy_fail_message }}
  when: check_deploy_complete.stdout != "deploy-completed"

- name: Delete deployment
  shell: |
    {{ source_env_command }}
    software deploy delete
  register: check_deploy_delete
  failed_when: '"Deploy deleted with success" not in check_deploy_delete.stdout'

- name: Gather release deploy states
  shell: |
    {{ source_env_command }}
    software show {{ item }} | awk '$2 == "state" { print $4 }'
  register: applied_releases_deploy_state
  with_items: "{{ release_ids }}"
  failed_when: false

- name: Verify all releases deployed
  fail:
    msg: "{{ item.stdout }} failed to deploy "
  with_items: "{{ applied_releases_deploy_state.results }}"
  when: item.stdout != "deployed"
