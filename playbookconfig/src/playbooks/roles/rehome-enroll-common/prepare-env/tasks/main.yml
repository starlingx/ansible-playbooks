---
#
# Copyright (c) 2021-2024 Wind River Systems, Inc.
#
# SPDX-License-Identifier: Apache-2.0
#
#   This role is to check the target host environment before proceeding to
#   the next step.
#

- name: Set config path facts
  set_fact:
    config_permdir: "{{ platform_path + '/config/' + software_version }}"
    puppet_permdir: "{{ platform_path + '/puppet/' + software_version }}"

- name: Get subcloud active controller
  shell: |
    source /etc/platform/openrc
    system host-show $(cat /etc/hostname) --column hostname --format value
  register: controller_name

- name: Check if admin network parameters are defined
  set_fact:
    admin_network: true
  when: (admin_subnet is defined and admin_gateway_address is defined)

- name: Set network facts
  set_fact:
    controller_floating_address: "{{ management_start_address }}"
    external_oam_node_0_address: "{{ external_oam_node_0_address | default('derived') }}"

- name: Set initial address facts if not defined. They will be updated later
  set_fact:
    pxeboot_start_address: "{{ pxeboot_start_address | default('derived') }}"
    pxeboot_end_address: "{{ pxeboot_end_address | default('derived') }}"
    management_start_address: "{{ management_start_address | default('derived') }}"
    management_end_address: "{{ management_end_address | default('derived') }}"
    cluster_host_start_address: "{{ cluster_host_start_address | default('derived') }}"
    cluster_host_end_address: "{{ cluster_host_end_address | default('derived') }}"
    cluster_pod_start_address: "{{ cluster_pod_start_address | default('derived') }}"
    cluster_pod_end_address: "{{ cluster_pod_end_address | default('derived') }}"
    cluster_service_start_address: "{{ cluster_service_start_address | default('derived') }}"
    cluster_service_end_address: "{{ cluster_service_end_address | default('derived') }}"
    external_oam_start_address: "{{ external_oam_start_address | default('derived') }}"
    external_oam_end_address: "{{ external_oam_end_address | default('derived') }}"
    management_multicast_start_address: "{{ management_multicast_start_address | default('derived') }}"
    management_multicast_end_address: "{{ management_multicast_end_address | default('derived') }}"
    external_oam_node_0_address: "{{ external_oam_node_0_address | default('derived') }}"
    external_oam_node_1_address: "{{ external_oam_node_1_address | default('derived') }}"
    admin_start_address: "{{ admin_start_address | default('derived') }}"
    admin_end_address: "{{ admin_end_address | default('derived') }}"
    controller_floating_address: "{{ management_start_address | default('derived') }}"

- name: Set default values for docker proxies if not defined
  set_fact:
    docker_http_proxy: "{{ docker_http_proxy | default('undef') }}"
    docker_https_proxy: "{{ docker_https_proxy | default('undef') }}"
    docker_no_proxy: "{{ docker_no_proxy | default([]) }}"

- name: Query system_mode
  shell: |
    source /etc/platform/openrc
    system show | awk '$2 == "system_mode" { print $4 }'
  register: current_system_mode

- name: Set system mode based on the current config
  set_fact:
    system_mode: "{{ current_system_mode.stdout }}"

- name: Set admin network facts
  set_fact:
    admin_floating_address: "{{ admin_start_address }}"
    admin_gateway_address: "{{ admin_gateway_address }}"
  when: admin_network is defined

- name: Set derived facts for subsequent tasks/roles
  set_fact:
    derived_network_params:
      'controller_0_address': "{{ controller_floating_address|ipmath(1) }}"
      'controller_1_address': "{{ controller_floating_address|ipmath(2) }}"
      'controller_0_admin_address': "{{ admin_floating_address|ipmath(1)
                                        if admin_floating_address is defined }}"
      'controller_1_admin_address': "{{ admin_floating_address|ipmath(2)
                                        if admin_floating_address is defined}}"
      'oam_node_0_address': "{{ external_oam_node_0_address if external_oam_node_0_address != 'derived'
                           else external_oam_floating_address | ipmath(1) }}"
      'oam_node_1_address': "{{ external_oam_node_1_address if external_oam_node_1_address != 'derived'
                           else external_oam_floating_address | ipmath(2) }}"

- name: Set subcloud floating address
  set_fact:
    sc_floating_address: "{{ admin_floating_address
                           if admin_floating_address is defined
                           else controller_floating_address }}"

- name: Get existing docker no_proxy
  shell: >-
    source /etc/platform/openrc; system service-parameter-list |
    awk '($4 == "docker" && $8 == "no_proxy") {print $2}'
  register: existing_docker_no_proxy_result

- name: Set subcloud docker no_proxy facts
  set_fact:
    default_no_proxy:
      - localhost
      - 127.0.0.1
      - registry.local
      - "{{ cluster_service_start_address if cluster_service_start_address != 'derived'
          else (cluster_service_subnet | ipaddr(1)).split('/')[0]  }}"
      - "{{ controller_floating_address }}"
      - "{{ derived_network_params.controller_0_address }}"
      - "{{ external_oam_floating_address }}"
      - "{{ derived_network_params.oam_node_0_address }}"
      - registry.central
      - "{{ system_controller_oam_floating_address }}"
    non_sx_proxy_addons:
      - "{{ derived_network_params.controller_1_address }}"
      - "{{ derived_network_params.oam_node_1_address }}"
    docker_no_proxy_combined: []

- name: Set default no-proxy address list (non simplex)
  set_fact:
    default_no_proxy: "{{ default_no_proxy + non_sx_proxy_addons }}"
  when: system_mode != 'simplex'

- name: Add user defined no-proxy address list to subcloud no proxy list
  set_fact:
    docker_no_proxy_combined: "{{ default_no_proxy | union(docker_no_proxy) | ipwrap | unique }}"

- name: Get management interface of controller-0
  shell: >-
    source /etc/platform/openrc; system interface-network-list controller-0 |
    awk '$8 == "mgmt" { print $6 }'
  register: controller_0_management_interface_result

- name: Get management interface of controller-1 if the subcloud is not simplex
  shell: >-
    source /etc/platform/openrc; system interface-network-list controller-1 |
    awk '$8 == "mgmt" { print $6 }'
  register: controller_1_management_interface_result
  when: system_mode != 'simplex'

- block:

  - name: Get previous subcloud admin network name
    shell: >-
      source /etc/platform/openrc; system network-list |
      awk '$8 == "admin" { print $6 }'
    register: subcloud_admin_network_name

  - name: Get ifname of the existing admin network of controller-0
    shell: >-
      source /etc/platform/openrc; system interface-network-list controller-0 |
      awk '$8 == "{{ subcloud_admin_network_name.stdout }}" { print $6 }'
    register: controller_0_admin_network_if

  - name: Fail if admin network interface of controller-0 is not assigned
    fail:
      msg: "admin network interfaces of controller-0 is not assigned"
    when: controller_0_admin_network_if.stdout == ""

  - name: Set admin_if_c0 fact
    set_fact:
      admin_if_c0: "{{ controller_0_admin_network_if.stdout_lines[0] }}"

  - block:
    - name: Get ifname of the existing admin network of controller-1
      shell: >-
        source /etc/platform/openrc; system interface-network-list controller-1 |
        awk '$8 == "{{ subcloud_admin_network_name.stdout }}" { print $6 }'
      register: controller_1_admin_network_if

    - name: Fail if admin network interface of controller-1 is not assigned
      fail:
        msg: "admin network interfaces of controller-1 is not assigned"
      when: controller_1_admin_network_if.stdout == ""

    - name: Set admin_if_c1 fact
      set_fact:
        admin_if_c1: "{{ controller_1_admin_network_if.stdout_lines[0] }}"

    when: system_mode != "simplex"

  - name: Get existing admin address pool
    shell: >-
      source /etc/platform/openrc; system network-list |
      awk '$8 == "admin" { print $12 }'
    register: admin_address_pool_uuid

  - name: Get existing admin floating address
    shell: >-
      source /etc/platform/openrc; system addrpool-list |
      awk ' $2 == "{{ admin_address_pool_uuid.stdout }}" && $14 == "{{ admin_floating_address }}" '
    register: check_existing_admin_floating_address

  - name: Get existing admin gateway
    shell: >-
      source /etc/platform/openrc; system addrpool-list |
      awk ' $2 == "{{ admin_address_pool_uuid.stdout }}" && $20 == "{{ admin_gateway_address }}" '
    register: check_existing_admin_gateway

  - name: Set admin gateway and floating address update required facts
    set_fact:
      admin_floating_update_required: "{{ false if check_existing_admin_floating_address.stdout else true }}"
      admin_gateway_update_required: "{{ false if check_existing_admin_gateway.stdout else true }}"

  when: admin_network is defined
