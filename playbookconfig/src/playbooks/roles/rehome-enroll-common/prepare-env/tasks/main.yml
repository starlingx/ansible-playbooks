---
#
# Copyright (c) 2021-2024 Wind River Systems, Inc.
#
# SPDX-License-Identifier: Apache-2.0
#
#   This role is to check the target host environment before proceeding to
#   the next step.
#

- name: Set config path facts
  set_fact:
    config_permdir: "{{ platform_path + '/config/' + software_version }}"
    puppet_permdir: "{{ platform_path + '/puppet/' + software_version }}"

- name: Get subcloud active controller
  shell: |
    source /etc/platform/openrc
    system host-show $(cat /etc/hostname) --column hostname --format value
  register: controller_name

- name: Check if admin network parameters are defined
  set_fact:
    admin_network: true
  when: (admin_subnet is defined and admin_gateway_address is defined)

- name: Set initial address facts if not defined. They will be updated later
  set_fact:
    pxeboot_start_address: "{{ pxeboot_start_address | default('derived') }}"
    pxeboot_end_address: "{{ pxeboot_end_address | default('derived') }}"
    management_start_address: "{{ management_start_address | default('derived') }}"
    management_end_address: "{{ management_end_address | default('derived') }}"
    cluster_host_start_address: "{{ cluster_host_start_address | default('derived') }}"
    cluster_host_end_address: "{{ cluster_host_end_address | default('derived') }}"
    cluster_pod_start_address: "{{ cluster_pod_start_address | default('derived') }}"
    cluster_pod_end_address: "{{ cluster_pod_end_address | default('derived') }}"
    cluster_service_start_address: "{{ cluster_service_start_address | default('derived') }}"
    cluster_service_end_address: "{{ cluster_service_end_address | default('derived') }}"
    external_oam_start_address: "{{ external_oam_start_address | default('derived') }}"
    external_oam_end_address: "{{ external_oam_end_address | default('derived') }}"
    management_multicast_start_address: "{{ management_multicast_start_address | default('derived') }}"
    management_multicast_end_address: "{{ management_multicast_end_address | default('derived') }}"
    external_oam_node_0_address: "{{ external_oam_node_0_address | default('derived') }}"
    external_oam_node_1_address: "{{ external_oam_node_1_address | default('derived') }}"
    admin_start_address: "{{ admin_start_address | default('derived') }}"
    admin_end_address: "{{ admin_end_address | default('derived') }}"

# Network config validation
- block:
  - name: Validate and parse provided comma separated dual-stack subnets (IPv4 & IPv6 notations)
    include_tasks: roles/common/validate-addresses/tasks/validate_and_parse_dual_stack.yml
    with_dict:
      external_oam_subnet: "{{ external_oam_subnet }}"
      management_subnet: "{{ management_subnet }}"
      admin_subnet: "{{ admin_subnet | default([]) }}"
      cluster_service_subnet: "{{ cluster_service_subnet }}"
    loop_control:
      loop_var: network_param
    when: network_param.value != "undef"

  - name: Validate and parse provided comma separated dual-stack addresses (IPv4 & IPv6 notations)
    include_tasks: roles/common/validate-addresses/tasks/validate_and_parse_dual_stack.yml
    with_dict:
      external_oam_node_0_address: "{{ external_oam_node_0_address }}"
      external_oam_node_1_address: "{{ external_oam_node_1_address }}"
      external_oam_floating_address: "{{ external_oam_floating_address }}"
      management_start_address: "{{ management_start_address }}"
      admin_start_address: "{{ admin_start_address }}"
      admin_end_address: "{{ admin_end_address }}"
      cluster_service_start_address: "{{ cluster_service_start_address }}"
      management_gateway_address: "{{ management_gateway_address | default([]) }}"
      admin_gateway_address: "{{ admin_gateway_address | default([]) }}"
    loop_control:
      loop_var: network_param
    when: network_param.value != "undef" and network_param.value != "derived"

  # validate dual-stack address respective to subnet, sequence of ip family (primary and secondary) should
  # match between address and subnet. Both address and respective subnet either should be single-stack or dual-stack.
  - name: Validate same sequence and number (single or dual-stack) of IP family on subnet and address
    include_tasks: roles/common/validate-addresses/tasks/validate_dual_stack_address_vs_subnet.yml
    with_dict:
      external_oam_node_0_address:
        address: "{{ external_oam_node_0_address }}"
        subnet:
          name: external_oam_subnet
          value: "{{ external_oam_subnet }}"
      external_oam_node_1_address:
        address: "{{ external_oam_node_1_address }}"
        subnet:
          name: external_oam_subnet
          value: "{{ external_oam_subnet }}"
      external_oam_floating_address:
        address: "{{ external_oam_floating_address }}"
        subnet:
          name: external_oam_subnet
          value: "{{ external_oam_subnet }}"
      management_start_address:
        address: "{{ management_start_address }}"
        subnet:
          name: management_subnet
          value: "{{ management_subnet }}"
      cluster_service_start_address:
        address: "{{ cluster_service_start_address }}"
        subnet:
          name: cluster_service_subnet
          value: "{{ cluster_service_subnet }}"
    when: item.value.address != "derived"

  - name: Validate same sequence and number (single or dual-stack) of IP family on management gateway address and subnet
    include_tasks: roles/common/validate-addresses/tasks/validate_dual_stack_address_vs_subnet.yml
    with_dict:
      management_gateway_address:
        address: "{{ management_gateway_address }}"
        subnet:
          name: management_subnet
          value: "{{ management_subnet }}"
    when: item.value.address is defined

  - name: Validate same sequence and number (single or dual-stack) of IP family on admin subnet and address
    include_tasks: roles/common/validate-addresses/tasks/validate_dual_stack_address_vs_subnet.yml
    with_dict:
      admin_start_address:
        address: "{{ admin_start_address }}"
        subnet:
          name: admin_subnet
          value: "{{ admin_subnet }}"
      admin_end_address:
        address: "{{ admin_end_address }}"
        subnet:
          name: admin_subnet
          value: "{{ admin_subnet }}"
      admin_gateway_address:
        address: "{{ admin_gateway_address }}"
        subnet:
          name: admin_subnet
          value: "{{ admin_subnet }}"
    when: admin_network is defined and item.value.address != "derived"

  - name: Assign dual_stack_network_params to network_params
    set_fact:
      network_params: >-
                  {{ dual_stack_network_params }}
      dual_stack_network_params: { }

  - debug:
      msg:
        - dual-stack parsed {{ network_params }}

  # The provided subnets have passed validation, set the primary default addresses
  # based on the primary subnet values
  - name: Set default start primary addresses based on provided primary subnets
    set_fact:
      default_external_oam_start_address_primary: "{{ (network_params.external_oam_subnet_primary | ipaddr(1))
                                                      .split('/')[0] }}"
      default_management_start_address_primary: "{{ (network_params.management_subnet_primary | ipaddr(1)).split('/')[0] }}"
      default_cluster_service_start_address_primary: "{{ (network_params.cluster_service_subnet_primary |
                                                         ipaddr(1)).split('/')[0] }}"

  # The provided subnets have passed validation, set the secondary default addresses
  # based on the secondary subnet values, if present.
  - name: Set default start secondary addresses based on provided secondary subnets
    set_fact:
      default_external_oam_start_address_secondary: "{{ False if (not network_params.external_oam_subnet_secondary)
                                                              else (network_params.external_oam_subnet_secondary |
                                                                    ipaddr(1)).split('/')[0] }}"
      default_management_start_address_secondary: "{{ False if (not network_params.management_subnet_secondary)
                                                            else (network_params.management_subnet_secondary |
                                                                  ipaddr(1)).split('/')[0] }}"
      default_cluster_service_start_address_secondary: "{{ False if (not network_params.cluster_service_subnet_secondary)
                                                            else (network_params.cluster_service_subnet_secondary |
                                                                  ipaddr(1)).split('/')[0] }}"

  - name: Set default start admin network addresses based on provided subnets
    set_fact:
      default_admin_start_address_primary: "{{ (network_params.admin_subnet_primary | ipaddr(1)).split('/')[0] }}"
      default_admin_end_address_primary: "{{ (network_params.admin_subnet_primary | ipaddr(-2)).split('/')[0] }}"
      default_admin_start_address_secondary: "{{ False if (not network_params.admin_subnet_secondary)
                                                       else (network_params.admin_subnet_secondary | ipaddr(1))
                                                            .split('/')[0] }}"
      default_admin_end_address_secondary: "{{ False if (not network_params.admin_subnet_secondary)
                                                     else (network_params.admin_subnet_secondary | ipaddr(-2))
                                                          .split('/')[0] }}"
    when: admin_network is defined

- name: Set default values for docker proxies if not defined
  set_fact:
    docker_http_proxy: "{{ docker_http_proxy | default('undef') }}"
    docker_https_proxy: "{{ docker_https_proxy | default('undef') }}"
    docker_no_proxy: "{{ docker_no_proxy | default([]) }}"

- name: Query system_mode
  shell: |
    source /etc/platform/openrc
    system show | awk '$2 == "system_mode" { print $4 }'
  register: current_system_mode

- name: Set system mode based on the current config
  set_fact:
    system_mode: "{{ current_system_mode.stdout }}"

- name: Set network facts
  set_fact:
    controller_floating_address: "{{ network_params.management_start_address_primary
                                     if management_start_address != 'derived'
                                     else default_management_start_address_primary }}"

- name: Set admin network facts
  set_fact:
    admin_floating_address: "{{ network_params.admin_start_address_primary
                                if admin_start_address != 'derived'
                                else default_admin_start_address_primary }}"
    admin_gateway_address_primary: "{{ network_params.admin_gateway_address_primary }}"
  when: admin_network is defined

- name: Set derived facts for subsequent tasks/roles
  set_fact:
    derived_network_params:
      'controller_0_address': "{{ controller_floating_address|ipmath(1) }}"
      'controller_1_address': "{{ controller_floating_address|ipmath(2) }}"
      'controller_0_admin_address': "{{ admin_floating_address|ipmath(1)
                                        if admin_floating_address is defined }}"
      'controller_1_admin_address': "{{ admin_floating_address|ipmath(2)
                                        if admin_floating_address is defined}}"
      'oam_node_0_address': "{{ network_params.external_oam_node_0_address_primary
                           if external_oam_node_0_address != 'derived'
                           else network_params.external_oam_floating_address_primary | ipmath(1) }}"
      'oam_node_1_address': "{{ network_params.external_oam_node_1_address_primary
                           if external_oam_node_1_address != 'derived'
                           else network_params.external_oam_floating_address_primary | ipmath(2) }}"

# Add secondary network addresses when defined
- block:
  - name: Set network secondary facts
    set_fact:
      controller_floating_address_secondary: "{{ network_params.management_start_address_secondary
                                                if management_start_address != 'derived'
                                                else default_management_start_address_secondary }}"
    when: network_params.management_subnet_secondary

  - name: Set admin secondary network facts
    set_fact:
      admin_floating_address_secondary: "{{ network_params.admin_start_address_secondary
                                            if admin_start_address != 'derived'
                                  else default_admin_start_address_secondary }}"
      admin_gateway_address_secondary: "{{ network_params.admin_gateway_address_secondary }}"
    when: admin_network is defined and network_params.admin_subnet_secondary

  - name: Set secondary controller address in derived facts for subsequent tasks/roles
    set_fact:
      derived_network_params: >-
        {{ derived_network_params | combine({
        "controller_0_address_secondary": controller_floating_address_secondary|ipmath(1),
        "controller_1_address_secondary": controller_floating_address_secondary|ipmath(2)
        }) }}
    when: controller_floating_address_secondary is defined

  - name: Set secondary admin address in derived facts for subsequent tasks/roles
    set_fact:
      derived_network_params: >-
        {{ derived_network_params | combine({
        "controller_0_admin_address_secondary": admin_floating_address_secondary|ipmath(1),
        "controller_1_admin_address_secondary": admin_floating_address_secondary|ipmath(2)
        }) }}
    when: admin_floating_address_secondary is defined

  - name: Set secondary oam node address in derived facts for subsequent tasks/roles
    set_fact:
      derived_network_params: >-
        {{ derived_network_params | combine({
        "oam_node_0_address_secondary": network_params.external_oam_node_0_address_secondary
                                        if external_oam_node_0_address != 'derived'
                                        else network_params.external_oam_floating_address_secondary | ipmath(1),
        "oam_node_1_address_secondary": network_params.external_oam_node_1_address_secondary
                                        if external_oam_node_1_address != 'derived'
                                        else network_params.external_oam_floating_address_secondary | ipmath(2)
        }) }}
    when: network_params.external_oam_subnet_secondary

- name: Set subcloud floating address
  set_fact:
    sc_floating_address: "{{ admin_floating_address
                           if admin_floating_address is defined
                           else controller_floating_address }}"

- name: Get existing docker no_proxy
  shell: >-
    source /etc/platform/openrc; system service-parameter-list |
    awk '($4 == "docker" && $8 == "no_proxy") {print $2}'
  register: existing_docker_no_proxy_result

- name: Set subcloud docker no_proxy facts
  set_fact:
    default_no_proxy:
      - localhost
      - 127.0.0.1
      - registry.local
      - "{{ network_params.cluster_service_start_address_primary if cluster_service_start_address != 'derived'
          else default_cluster_service_start_address_primary }}"
      - "{{ controller_floating_address }}"
      - "{{ derived_network_params.controller_0_address }}"
      - "{{ network_params.external_oam_floating_address_primary }}"
      - "{{ derived_network_params.oam_node_0_address }}"
      - registry.central
      - "{{ system_controller_oam_floating_address }}"
    non_sx_proxy_addons:
      - "{{ derived_network_params.controller_1_address }}"
      - "{{ derived_network_params.oam_node_1_address }}"
    docker_no_proxy_combined: []

# Add respective secondary when defined in default_no_proxy
- block:
  - set_fact:
      default_no_proxy: "{{ default_no_proxy + [
                                            network_params.cluster_service_start_address_secondary
                                            if cluster_service_start_address != 'derived'
                                            else default_cluster_service_start_address_secondary
                        ]}}"
    when: network_params.cluster_service_subnet_secondary

  - set_fact:
      default_no_proxy: "{{ default_no_proxy + [ controller_floating_address_secondary ]}}"
    when: controller_floating_address_secondary is defined

  - set_fact:
      default_no_proxy: "{{ default_no_proxy + [ derived_network_params.controller_0_address_secondary ]}}"
    when: controller_floating_address_secondary is defined

  - set_fact:
      default_no_proxy: "{{ default_no_proxy + [ network_params.external_oam_floating_address_secondary ]}}"
    when: network_params.external_oam_floating_address_secondary

  - set_fact:
      default_no_proxy: "{{ default_no_proxy + [ derived_network_params.oam_node_0_address_secondary ]}}"
    when: network_params.external_oam_subnet_secondary

# Add respective secondary when defined in non_sx_proxy_addons
- block:
  - set_fact:
      non_sx_proxy_addons: "{{ non_sx_proxy_addons + [ derived_network_params.controller_1_address_secondary
                        ]}}"
    when: controller_floating_address_secondary is defined

  - set_fact:
      non_sx_proxy_addons: "{{ non_sx_proxy_addons + [ derived_network_params.oam_node_1_address_secondary
                        ]}}"
    when: network_params.external_oam_subnet_secondary

- name: Set default no-proxy address list (non simplex)
  set_fact:
    default_no_proxy: "{{ default_no_proxy + non_sx_proxy_addons }}"
  when: system_mode != 'simplex'

- name: Add user defined no-proxy address list to subcloud no proxy list
  set_fact:
    docker_no_proxy_combined: "{{ default_no_proxy | union(docker_no_proxy) | ipwrap | unique }}"

- name: Get management interface of controller-0
  shell: >-
    source /etc/platform/openrc; system interface-network-list controller-0 |
    awk '$8 == "mgmt" { print $6 }'
  register: controller_0_management_interface_result

- name: Get management interface of controller-1 if the subcloud is not simplex
  shell: >-
    source /etc/platform/openrc; system interface-network-list controller-1 |
    awk '$8 == "mgmt" { print $6 }'
  register: controller_1_management_interface_result
  when: system_mode != 'simplex'

- block:

  - name: Get previous subcloud admin network name
    shell: >-
      source /etc/platform/openrc; system network-list |
      awk '$8 == "admin" { print $6 }'
    register: subcloud_admin_network_name

  - name: Get ifname of the existing admin network of controller-0
    shell: >-
      source /etc/platform/openrc; system interface-network-list controller-0 |
      awk '$8 == "{{ subcloud_admin_network_name.stdout }}" { print $6 }'
    register: controller_0_admin_network_if

  - name: Fail if admin network interface of controller-0 is not assigned
    fail:
      msg: "admin network interfaces of controller-0 is not assigned"
    when: controller_0_admin_network_if.stdout == ""

  - name: Set admin_if_c0 fact
    set_fact:
      admin_if_c0: "{{ controller_0_admin_network_if.stdout_lines[0] }}"

  - block:
    - name: Get ifname of the existing admin network of controller-1
      shell: >-
        source /etc/platform/openrc; system interface-network-list controller-1 |
        awk '$8 == "{{ subcloud_admin_network_name.stdout }}" { print $6 }'
      register: controller_1_admin_network_if

    - name: Fail if admin network interface of controller-1 is not assigned
      fail:
        msg: "admin network interfaces of controller-1 is not assigned"
      when: controller_1_admin_network_if.stdout == ""

    - name: Set admin_if_c1 fact
      set_fact:
        admin_if_c1: "{{ controller_1_admin_network_if.stdout_lines[0] }}"

    when: system_mode != "simplex"

  - name: Get existing admin address pool
    shell: >-
      source /etc/platform/openrc; system network-list |
      awk '$8 == "admin" { print $12 }'
    register: admin_address_pool_uuid

  - name: Get existing primary admin floating address
    shell: >-
      source /etc/platform/openrc; system addrpool-list |
      awk ' $2 == "{{ admin_address_pool_uuid.stdout }}" && $14 == "{{ admin_floating_address }}" '
    register: check_existing_admin_floating_address_primary

  - name: Get existing primary admin gateway
    shell: >-
      source /etc/platform/openrc; system addrpool-list |
      awk ' $2 == "{{ admin_address_pool_uuid.stdout }}" && $20 == "{{ admin_gateway_address_primary }}" '
    register: check_existing_admin_gateway_primary

  - name: Set primary admin gateway and floating address update required facts
    set_fact:
      admin_floating_update_required_primary: "{{ false if check_existing_admin_floating_address_primary.stdout
                                                        else true }}"
      admin_gateway_update_required_primary: "{{ false if check_existing_admin_gateway_primary.stdout else true }}"

  - name: Set admin_addrpool_secondary fact
    include_role:
      name: common/get-admin-addrpool-secondary
    vars:
      admin_addrpool: "{{ admin_address_pool_uuid.stdout }}"

  - block:
    - name: Set secondary admin gateway and floating address update required facts
      set_fact:
        admin_floating_update_required_secondary: false
        admin_gateway_update_required_secondary: false
      when: admin_addrpool_secondary is not defined
            and not network_params.admin_subnet_secondary

    - name: Set secondary admin gateway and floating address update required facts
      set_fact:
        admin_floating_update_required_secondary: true
        admin_gateway_update_required_secondary: true
      when: (admin_addrpool_secondary is not defined
            and network_params.admin_subnet_secondary)
            or (admin_addrpool_secondary is defined
            and not network_params.admin_subnet_secondary)

    - block:
      - name: Get existing secondary admin floating address
        shell: >-
          source /etc/platform/openrc; system addrpool-list |
          awk ' $2 == "{{ admin_addrpool_secondary }}" && $14 == "{{ admin_floating_address_secondary }}" '
        register: check_existing_admin_floating_address_secondary

      - name: Get existing secondary admin gateway
        shell: >-
          source /etc/platform/openrc; system addrpool-list |
          awk ' $2 == "{{ admin_addrpool_secondary }}" && $20 == "{{ admin_gateway_address_secondary }}" '
        register: check_existing_admin_gateway_secondary

      - name: Set secondary admin gateway and floating address update required facts
        set_fact:
          admin_floating_update_required_secondary: "{{ false if check_existing_admin_floating_address_secondary.stdout
                                                              else true }}"
          admin_gateway_update_required_secondary: "{{ false if check_existing_admin_gateway_secondary.stdout
                                                             else true }}"

      when: admin_addrpool_secondary is defined and network_params.admin_subnet_secondary

  - name: Set primary/secondary admin gateway and floating address update required facts
    set_fact:
      admin_floating_update_required: "{{ admin_floating_update_required_primary
                                          or admin_floating_update_required_secondary }}"
      admin_gateway_update_required: "{{ admin_gateway_update_required_primary
                                         or admin_gateway_update_required_secondary }}"

  when: admin_network is defined
