---
#
# Copyright (c) 2022-2024 Wind River Systems, Inc.
#
# SPDX-License-Identifier: Apache-2.0
#
# SUB-TASKS DESCRIPTION:
#   These tasks store service passwords in keyring and then invoke
#   openstack password change command to update these passwords in
#   keystone database which in turn triggers the keystone listener to
#   apply puppet runtime manifests to reload the affected services.
#

# In case the rehoming ever failed in the middle of password migration,
# so some of the users' passwords might have been changed in the past.
# This check is to make sure the rehoming can be rerun.
- name: "Check if openstack {{ username }} password is changed"
  shell: >-
    source /etc/platform/openrc;
    export OS_USERNAME='{{ username }}';
    export OS_PASSWORD='{{ password }}';
    export OS_PROJECT_NAME=services;
    openstack user list
  register: password_check_result
  ignore_errors: true
  no_log: true

- block:
  - name: "Store {{ username }} service password in keyring"
    vars:
      script_content: |
        import keyring
        import os
        os.environ['XDG_DATA_HOME'] = "/opt/platform/.keyring/{{ software_version }}"
        keyring.set_password("{{ username }}", "services", "{{ password }}")
    shell: "{{ script_content }}"
    args:
      executable: /usr/bin/python
    no_log: true

  - name: "Store the {{ username }} old config uuid of controller-0"
    shell: source /etc/platform/openrc; system host-show controller-0
           | grep -i "config_applied"
    register: c0_old_config_uuid

  - name: "Store the {{ username }} old config uuid of controller-1"
    shell: source /etc/platform/openrc; system host-show controller-1
           | grep -i "config_applied"
    register: c1_old_config_uuid
    when: system_mode != "simplex"

  - name: "Update {{ username }} keystone password"
    shell: >-
      source /etc/platform/openrc;
      openstack user set '{{ username }}' --password $'{{ password }}';

  # As dcmanager service is not running on the subcloud, service password update
  # in keystone database is good enough. Config file update and service restart
  # by puppet runtime manifest is not required for dcmanager service.
  - block:
    - name: "Wait for sysinv agent to apply {{ username }}::password::runtime on controller-0"
      shell: source /etc/platform/openrc; system host-show controller-0
             | grep -i "config_applied"
      register: c0_new_config_uuid
      until: c0_old_config_uuid.stdout != c0_new_config_uuid.stdout
      retries: 18
      delay: 10

    - name: "Wait for sysinv agent to apply {{ username }}::password::runtime on controller-1"
      shell: source /etc/platform/openrc; system host-show controller-1
             | grep -i "config_applied"
      register: c1_new_config_uuid
      until: c1_old_config_uuid.stdout != c1_new_config_uuid.stdout
      retries: 18
      delay: 10
      when: system_mode != "simplex"

    - name: "Check {{ service }} service status"
      shell: sm-query service '{{ service }}' | grep -c enabled-active
      register: service_status
      until: service_status.stdout == '1'
      retries: 6
      delay: 10
      when: username != 'patching' and username != 'usm'

    - name: Check sw-patch-controller-daemon service status
      command: systemctl is-active sw-patch-controller-daemon
      register: patch_status
      until: patch_status.rc == 0
      retries: 6
      delay: 10
      when: username == 'patching'

    - name: Check software-controller-daemon service status
      command: systemctl is-active software-controller-daemon
      register: usm_status
      until: usm_status.rc == 0
      retries: 6
      delay: 10
      when: username == 'usm'

    when: service != 'dcmanager'

  when: password_check_result.rc != 0
