---
#
# Copyright (c) 2024 Wind River Systems, Inc.
#
# SPDX-License-Identifier: Apache-2.0
#
# ROLE DESCRIPTION:
#   This role checks the essential services and recovers them for the next steps
#

- name: Check if the controller is active controller
  shell: source /etc/platform/openrc
  register: active_controller
  failed_when: false

- set_fact:
    is_active_controller: >-
      {{ true if 'stdout' in active_controller and active_controller.stdout
      | length == 0 else false }}

- name: Fail if not active controller
  fail:
    msg: "Subcloud enrollment cannot be done on non-active controller."
  when: not is_active_controller

- name: Set config path facts
  set_fact:
    config_permdir: "{{ platform_path + '/config/' + software_version }}"
    puppet_permdir: "{{ platform_path + '/puppet/' + software_version }}"

- name: Check if sysinv password is changed
  shell: >-
    source /etc/platform/openrc;
    export OS_USERNAME='sysinv';
    export OS_PASSWORD='{{ users['sysinv'] }}';
    export OS_PROJECT_NAME=services;
    openstack user list
  register: password_check_result
  ignore_errors: true
  no_log: true

- name: Check sysinv-inv service service_status
  shell: sm-query service sysinv-inv | grep -c enabled-active
  register: sysinv_inv_status
  failed_when: false

- name: Update sysinv services
  block:
  - name: Disable keystone lockout
    include_role:
      name: rehome-enroll-common/disable-keystone-lockout

  - name: Store sysinv service password in keyring
    vars:
      script_content: |
        import keyring
        import os
        os.environ['XDG_DATA_HOME'] = "/opt/platform/.keyring/{{ software_version }}"
        keyring.set_password("sysinv", "services", "{{ users['sysinv'] }}")
    shell: "{{ script_content }}"
    args:
      executable: /usr/bin/python
    no_log: true

  - name: Update sysinv password in configuration on the active controller
    lineinfile:
      path: "{{ item }}"
      regexp: "^password=.*$"
      line: "password={{ users['sysinv'] }}"
    loop:
      - "/etc/sysinv/sysinv.conf"
      - "/etc/sysinv/api-paste.ini"
      - "/etc/sysinv/cert-mon.conf"
      - "/etc/sysinv/cert-alarm.conf"
    no_log: true

  - name: Update sysinv password in keystone
    shell: >-
      source /etc/platform/openrc;
      openstack user set 'sysinv' --password $'{{ users['sysinv'] }}';

  - name: Restart sysinv services to update the config in controller-0
    command: sm-restart-safe service "{{ item }}"
    loop:
      - "sysinv-inv"
      - "sysinv-conductor"
      - "cert-alarm"
      - "cert-mon"

  - name: Check sysinv-conductor related services enabled
    shell: sm-query service '{{ item }}' | grep -c enabled-active
    loop:
      - "sysinv-inv"
      - "cert-mon"
      - "cert-alarm"
      - "sysinv-conductor"
    register: service_status
    until: service_status.stdout == '1'
    retries: 12
    delay: 10

  - name: Update sysinv passwords in hieradata secure_static.yaml
    lineinfile:
      path: "/opt/platform/puppet/{{ software_version }}/hieradata/secure_static.yaml"
      regexp: "{{ item.From }}"
      line: "{{ item.To }}"
    loop:
      - { From: "^sysinv::api::keystone_password",
          To: "sysinv::api::keystone_password: !!python/unicode '{{ users['sysinv'] }}'" }
      - { From: "^sysinv::certalarm::local_keystone_password",
          To: "sysinv::certalarm::local_keystone_password: !!python/unicode '{{ users['sysinv'] }}'" }
      - { From: "^sysinv::certmon::local_keystone_password",
          To: "sysinv::certmon::local_keystone_password: !!python/unicode '{{ users['sysinv'] }}'" }
      - { From: "^sysinv::keystone::auth::password",
          To: "sysinv::keystone::auth::password: !!python/unicode '{{ users['sysinv'] }}'" }
    no_log: true

  when: >
    password_check_result.rc != 0 or sysinv_inv_status.stdout != '1'

  always:
  - name: Restore keystone lockout
    include_role:
      name: rehome-enroll-common/restore-keystone-lockout
