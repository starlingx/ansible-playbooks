---
#
# Copyright (c) 2019-2025 Wind River Systems, Inc.
#
# SPDX-License-Identifier: Apache-2.0
#
# ROLE DESCRIPTION:
#   This role is to check the target host environment before proceeding to
#   the next step.
#

- name: Set package lookup command
  set_fact:
    pkg_lookup_cmd: "{{ 'rpm -q' if os_release == 'centos' else 'dpkg -l' }}"

- name: Create SSL CA cert directory
  file:
    path: "{{  ca_cert_dir }}"
    state: directory
    owner: root
    group: root
    mode: 0755
    recurse: yes
  become: yes
  when: os_release == 'debian'

# Check for unmistakenly StarlingX packages
- name: "Look for unmistakenly {{ image_brand }} packages"
  command: "{{ pkg_lookup_cmd }} sysinv cgts-client"
  args:
    warn: false
  failed_when: false
  register: packages_installed

- name: Fail if host is not running the right image
  fail: msg='Host {{ ansible_host }} does not have the right image!.'
  when: packages_installed.rc > 0

# The following parameters should exist in default.yml. If any of them is
# not available, the file is invalid.
- name: Fail if any of the mandatory configurations are not defined
  fail:
    msg: "Mandatory configuration parameter {{ item }} is not defined."
  when: item is not defined
  with_items:
    - system_mode
    - timezone
    - pxeboot_subnet
    - management_subnet
    - cluster_host_subnet
    - cluster_pod_subnet
    - cluster_service_subnet
    - external_oam_subnet
    - external_oam_gateway_address
    - external_oam_floating_address
    - management_multicast_subnet
    - management_dynamic_address_allocation
    - cluster_host_dynamic_address_allocation
    - dns_servers
    - docker_registries
    - admin_username
    - admin_password
    - override_files_dir

- name: Set config path facts
  set_fact:
    keyring_permdir: "{{ platform_path + '/.keyring/' + software_version }}"
    config_permdir: "{{ platform_path + '/config/' + software_version }}"
    sysinv_permdir: "{{ platform_path + '/sysinv/' + software_version }}"
    puppet_permdir: "{{ platform_path + '/puppet/' + software_version }}"

- name: Check initial config flag
  stat:
    path: /etc/platform/.initial_config_complete
  register: initial_config_complete

- name: Check if bootstrap_finalized flag exists on host
  stat:
    path: "{{ config_permdir }}/.bootstrap_finalized"
  register: bootstrap_finalized_flag

- name: Fail if host is unlocked or host configurations have already started
  fail:
    msg: >
      "The bootstrap of host {{ ansible_host }} has already been finalized.
      Please re-install before attempting to bootstrap it again."
  when: bootstrap_finalized_flag.stat.exists or initial_config_complete.stat.exists

- block:
  - name: Fail if admin network parameters are defined for system controller host
    fail:
      msg: "Admin network parameters cannot be specified for a system controller host."
    when: distributed_cloud_role == 'systemcontroller'

  - name: Turn on admin_network flag
    set_fact:
      admin_network: true
  when: admin_subnet is defined and admin_gateway_address is defined

- name: Set initial address facts if not defined. They will be updated later
  set_fact:
    pxeboot_floating_address: "{{ pxeboot_floating_address | default('derived') }}"
    pxeboot_start_address: "{{ pxeboot_start_address | default('derived') }}"
    pxeboot_end_address: "{{ pxeboot_end_address | default('derived') }}"
    management_floating_address: "{{ management_floating_address | default('derived') }}"
    management_start_address: "{{ management_start_address | default('derived') }}"
    management_end_address: "{{ management_end_address | default('derived') }}"
    cluster_host_floating_address: "{{ cluster_host_floating_address | default('derived') }}"
    cluster_host_start_address: "{{ cluster_host_start_address | default('derived') }}"
    cluster_host_end_address: "{{ cluster_host_end_address | default('derived') }}"
    cluster_pod_start_address: "{{ cluster_pod_start_address | default('derived') }}"
    cluster_pod_end_address: "{{ cluster_pod_end_address | default('derived') }}"
    cluster_service_start_address: "{{ cluster_service_start_address | default('derived') }}"
    cluster_service_end_address: "{{ cluster_service_end_address | default('derived') }}"
    external_oam_start_address: "{{ external_oam_start_address | default('derived') }}"
    external_oam_end_address: "{{ external_oam_end_address | default('derived') }}"
    management_multicast_start_address: "{{ management_multicast_start_address | default('derived') }}"
    management_multicast_end_address: "{{ management_multicast_end_address | default('derived') }}"
    external_oam_node_0_address: "{{ external_oam_node_0_address | default('derived') }}"
    external_oam_node_1_address: "{{ external_oam_node_1_address | default('derived') }}"
    admin_floating_address: "{{ admin_floating_address | default('derived') }}"
    admin_start_address: "{{ admin_start_address | default('derived') }}"
    admin_end_address: "{{ admin_end_address | default('derived') }}"

- set_fact:
    docker_registries: "{{ vault_docker_registries }}"
  when: vault_docker_registries is defined

- name: Set default registries dictionary
  set_fact:
    default_docker_registries:
      k8s.gcr.io:
        url: k8s.gcr.io
      gcr.io:
        url: gcr.io
      quay.io:
        url: quay.io
      docker.io:
        url: docker.io
      docker.elastic.co:
        url: docker.elastic.co
      ghcr.io:
        url: ghcr.io
      registry.k8s.io:
        url: registry.k8s.io
      icr.io:
        url: icr.io

- name: Save the list of user defined registry keys
  set_fact:
    user_defined_registry_keys: "{{ docker_registries.keys() | list }}"

- name: Merge user and default registries dictionaries
  set_fact:
    docker_registries: "{{ default_docker_registries | combine(docker_registries) }}"
  no_log: true

- name: Initialize some flags to be used in subsequent roles/tasks
  set_fact:
    system_config_update: false
    network_config_update: false
    docker_config_update: false
    save_password: true
    save_config_to_db: true
    use_docker_proxy: false
    use_defaults_registry: false
    restart_services: false
    reconfigure_endpoints: false
    dc_role_changed: false
    etcd_root_ca_changed: false
    kube_extra_config_changed: false

    # Replay related flags
    last_config_file_exists: false
    incomplete_bootstrap: false
    initial_db_populated: false

- name: Set initial facts
  set_fact:
    system_params:
      'system_mode': "{{ system_mode }}"
      'timezone': "{{ timezone }}"
    root_disk_size: "{{ standard_root_disk_size }}"
    localhost_name_ip_mapping: "127.0.0.1\tlocalhost\tlocalhost.localdomain localhost4 localhost4.localdomain4"
    network_params:
      'pxeboot_subnet': "{{ pxeboot_subnet }}"
      'management_subnet': "{{ management_subnet }}"
      'cluster_host_subnet': "{{ cluster_host_subnet }}"
      'cluster_pod_subnet': "{{ cluster_pod_subnet }}"
      'cluster_service_subnet': "{{ cluster_service_subnet }}"
      'external_oam_subnet': "{{ external_oam_subnet }}"
      'external_oam_gateway_address': "{{ external_oam_gateway_address }}"
      'external_oam_floating_address': "{{ external_oam_floating_address }}"
      'management_multicast_subnet': "{{ management_multicast_subnet }}"
      'admin_subnet': "{{ admin_subnet | default([]) }}"
    # Set this placeholder here to workaround an Ansible quirk
    derived_network_params:
      place_holder: place_holder
    ansible_remote_tmp: "{{ ansible_remote_tmp | default('/tmp/.ansible-${USER}/tmp') }}"
    pods_wait_time: "{{ pods_wait_time | default(120) }}"
    bootstrap_completed_flag: "/etc/platform/.bootstrap_completed"
    initial_db_populated_flag: "{{ config_permdir }}/.initial_db_population_completed"

- name: Turn on use_docker_proxy flag
  set_fact:
    use_docker_proxy: true
  when: (docker_http_proxy is defined and docker_http_proxy is not none) or
        (docker_https_proxy is defined and docker_https_proxy is not none)

- name: Set default values for individual platform registries and registry secrets
  set_fact:
    default_k8s_registry:
      url: k8s.gcr.io
    default_gcr_registry:
      url: gcr.io
    default_quay_registry:
      url: quay.io
    default_docker_registry:
      url: docker.io
    default_elastic_registry:
      url: docker.elastic.co
    default_ghcr_registry:
      url: ghcr.io
    default_registryk8s_registry:
      url: registry.k8s.io
    default_icr_registry:
      url: icr.io

- name: Set default values for additional images list
  set_fact:
    additional_local_registry_images: "{{ additional_local_registry_images | default([]) }}"

- name: Set default values for images archive
  set_fact:
    images_archive_dir: "/opt/platform-backup/{{ software_version }}"
    images_archive_exists: false

- name: Set default values for OpenID connect
  set_fact:
    apiserver_oidc: "{{ apiserver_oidc | default({}) }}"

- name: Set default values for docker proxies if not defined
  set_fact:
    docker_http_proxy: "{{ docker_http_proxy | default('undef') }}"
    docker_https_proxy: "{{ docker_https_proxy | default('undef') }}"
    docker_no_proxy: "{{ docker_no_proxy | default([]) }}"

- name: Define k8s/etcd/system-local-ca certificate parameters if not defined
  set_fact:
    apiserver_cert_sans: "{{ apiserver_cert_sans | default([]) }}"
    etcd_root_ca_cert: "{{ etcd_root_ca_cert | default('') }}"
    etcd_root_ca_key: "{{ etcd_root_ca_key | default('') }}"
    system_local_ca_cert: "{{ system_local_ca_cert | default('', true) }}"
    system_local_ca_key: "{{ system_local_ca_key | default('', true) }}"
    system_root_ca_cert: "{{ system_root_ca_cert | default('', true) }}"
  no_log: true

- name: Define k8s root CA certificate parameters for subcloud role
  set_fact:
    k8s_root_ca_cert: "{{ k8s_root_ca_cert | default(default_subcloud_k8s_root_ca_cert) }}"
    k8s_root_ca_key: "{{ k8s_root_ca_key | default(default_subcloud_k8s_root_ca_key) }}"
  when: distributed_cloud_role == 'subcloud'
  no_log: true

- name: Define k8s root CA certificate parameters for non subcloud roles
  set_fact:
    k8s_root_ca_cert: "{{ k8s_root_ca_cert | default('') }}"
    k8s_root_ca_key: "{{ k8s_root_ca_key | default('') }}"
  when: distributed_cloud_role != 'subcloud'
  no_log: true

- name: Check if external certificates were embedded as strings and install them
  include_tasks: convert_embedded_certificates.yml

# Set the kubernetes_version if the user hasn't overridden it
- name: Check if kubernetes_version is specified
  set_fact:
    found_kubernetes_version: "{{ kubernetes_version is defined }}"

- block:
  - name: Set kubernetes_version for fresh installs.
    set_fact:
      kubernetes_version: "{{ fresh_install_k8s_version }}"
    when: not upgrade_in_progress

  - block:
    - name: Extract kubeadm version from the backup tarball
      # Match kube_cmd_versions VALUES from sysinv database table.
      command: >-
          zgrep -aE '^INSERT INTO .*kube_cmd_versions VALUES'
          {{ restore_data_file }}
      args:
        warn: false
      failed_when: false
      register: kube_cmd_search

    - name: Fetch the kubeadm version from the kube_cmd_versions table insert entry.
      set_fact:
        # Note: regex_search() returns a list containing capture groups.
        # The first filter obtains the first grouped element and converts
        # unicode string to string.
        latest_k8s_version: "{{ kube_cmd_search.stdout_lines[0] \
                            | regex_search(version_re, '\\1') \
                            | first }}"
      when: kube_cmd_search.rc == 0
      vars:
        # kubeadm_version is second last entry within VALUES tuple containing
        # 6 CSV elements. Exclude the single quotes surrounding the version.
        version_re: 'VALUES\s+\([^,]+,[^,]+,[^,]+,[^,]+,\s+''([^\s]+)'',[^,]+\);'

    - name: Set kubernetes_version for upgrades.
      set_fact:
        kubernetes_version: "{{ latest_k8s_version }}"
      when: latest_k8s_version is defined and latest_k8s_version|length > 0

    when: upgrade_in_progress

  - name: Set kubernetes_version for restores.
    set_fact:
      kubernetes_version: "{{ restore_k8s_version }}"
    when: restore_k8s_version is defined

  when: not found_kubernetes_version

- block:
  - name: Set kubernetes long version
    set_fact:
      kubernetes_long_version: "{{ kubernetes_version if kubernetes_version.startswith('v')
                               else 'v' + kubernetes_version }}"

  - name: Read in kubernetes versioned configuration parameters
    include_vars:
      dir: "vars/k8s-{{ kubernetes_long_version }}"
      extensions: ['yml']

  when: kubernetes_version is defined

- name: Combine k8s user overrides and default config parameters
  set_fact:
    apiserver_extra_args: "{{ apiserver_extra_args_defaults \
                          | combine({ 'feature-gates': apiserver_feature_gates|default(omit) }, \
                          apiserver_extra_args|default({})) }}"
    apiserver_extra_volumes: "{{ apiserver_extra_volumes_defaults + apiserver_extra_volumes }}"
    controllermanager_extra_args: "{{ controllermanager_extra_args_defaults \
                                  | combine(controllermanager_extra_args|default({})) }}"
    controllermanager_extra_volumes: "{{ controllermanager_extra_volumes_defaults + controllermanager_extra_volumes }}"
    scheduler_extra_args: "{{ scheduler_extra_args_defaults \
                                  | combine(scheduler_extra_args|default({})) }}"
    scheduler_extra_volumes: "{{ scheduler_extra_volumes_defaults + scheduler_extra_volumes }}"
    kubelet_extra_args: "{{ kubelet_extra_args_defaults \
                        | combine(kubelet_extra_args|default({})) }}"
    kubelet_configurations: "{{ kubelet_configurations_defaults \
                            | combine(kubelet_configurations|default({})) }}"
    networking_configurations: "{{ networking_configurations_defaults \
                               | combine(networking_configurations|default({})) }}"

- block:
  - name: Update controller-manager extraArgs to disable leader election
    set_fact:
      controllermanager_extra_args: "{{ controllermanager_extra_args | combine({ 'leader-elect': 'false' }) }}"

  - name: Update scheduler extraArgs to disable leader election
    set_fact:
      scheduler_extra_args: "{{ scheduler_extra_args | combine({ 'leader-elect': 'false' }) }}"
  when: system_mode == 'simplex'

- name: Add OpenID Connect parameter oidc-client-id to apiserver extraArgs section
  set_fact:
    apiserver_extra_args: "{{ apiserver_extra_args | combine({ 'oidc-client-id' : apiserver_oidc.client_id })}}"
  when: apiserver_oidc.client_id is defined

- name: Add OpenID Connect parameter oidc-issuer-url to apiserver extraArgs section
  set_fact:
    apiserver_extra_args: "{{ apiserver_extra_args | combine({ 'oidc-issuer-url' : apiserver_oidc.issuer_url })}}"
  when: apiserver_oidc.issuer_url is defined

- name: Add OpenID Connect parameter oidc-username-claim to apiserver extraArgs section
  set_fact:
    apiserver_extra_args: "{{ apiserver_extra_args | combine({ 'oidc-username-claim' : apiserver_oidc.username_claim })}}"
  when: apiserver_oidc.username_claim is defined

- name: Add OpenID Connect parameter oidc-groups-claim to apiserver extraArgs section
  set_fact:
    apiserver_extra_args: "{{ apiserver_extra_args | combine({ 'oidc-groups-claim' : apiserver_oidc.groups_claim })}}"
  when: apiserver_oidc.groups_claim is defined

# Give the bootstrap config output file on the host a generic name so the
# same file is referenced if the host is bootstrapped locally and remotely
# in whatever order.
- name: Set bootstrap output file
  set_fact:
    last_bootstrap_config_file: "{{ config_permdir }}/last_bootstrap_config.yml"
    tmp_kubernetes_extra_config_file: "/tmp/kube_extra_config_bootstrap.yaml"
    last_kubernetes_extra_config_file: "{{ config_permdir }}/last_kube_extra_config_bootstrap.yaml"

- name: Remove tmp kubernetes configuration file
  file:
    path: "{{ tmp_kubernetes_extra_config_file }}"
    state: absent

- name: Save the current kubernetes extraArgs and extraVolumes configuration
  include_role:
    name: common/prepare-env
    tasks_from: kube-extra-save-configuration
  vars:
    dst_file: "{{ tmp_kubernetes_extra_config_file }}"

- name: Look for tmp kubernetes configuration file stats
  stat:
    path: "{{ tmp_kubernetes_extra_config_file }}"
    get_checksum: yes
  register: tmp_kubernetes_extra_config_stat

- name: Look for last kubernetes configuration file stats
  stat:
    path: "{{ last_kubernetes_extra_config_file }}"
    get_checksum: yes
  register: last_kubernetes_extra_config_stat

- block:  # exexcuted if the last kubernetes extra config file exists
  - name: Turn on kube_extra_config_changed flag
    set_fact:
      kube_extra_config_changed: true
  when: last_kubernetes_extra_config_stat.stat.exists and
        last_kubernetes_extra_config_stat.stat.checksum != tmp_kubernetes_extra_config_stat.stat.checksum

- name: Check Docker status
  command: systemctl status docker
  failed_when: false
  register: docker

- name: Look for openrc file
  stat:
    path: /etc/platform/openrc
  register: openrc_file

# Eliminate any interface config file that was left to avoid potential
# problems. For example, pxeboot can leave an interface script in controller-0
# with a dhcp config that can remain if the pxeboot interface isn't part of
# StarlingX managed interfaces. This will start a "rogue" dhclient after unlock
# (controllers use static addressing from DB).
- name: Clean up interface config files in /etc/network/interfaces.d/
  shell: rm -rf /etc/network/interfaces.d/*
  args:
    warn: false
  become: yes

- block:
  - name: Turn on replayed flag
    set_fact:
      replayed: true

  # If the bootstrap manifest has been applied, prevent password regeneration upon
  # replay.
  # TODO(tngo): Revise this logic once the decision has been made to continue
  #             storing admin password using python keyring or switching to
  #             barbican as the frontend and possibly backend changes to support password
  #             regeneration in bootstrap replays differ considerably between the
  #             two storage approaches.
  - name: Turn off save_password flag
    set_fact:
      save_password: false
  when: openrc_file.stat.exists and docker.rc == 0

- block:  # executed if it is a replay
  - name: Check the overall status of the previous play
    stat:
      path: "{{ bootstrap_completed_flag }}"
    register: bootstrap_completed

  - block:  # executed when previous play did not complete
    - name: Turn on incomplete_bootstrap flag if the previous play did not complete
      set_fact:
        incomplete_bootstrap: true
        restart_services: true

    - name: Check the initial database population status
      stat:
        path: "{{ initial_db_populated_flag }}"
      register: initial_db_population_completed

    - name: Turn on initial_db_populated and restart_services flags if initial db population did complete
      set_fact:
        initial_db_populated: true
      when: initial_db_population_completed.stat.exists

    when: not bootstrap_completed.stat.exists

  - block:  # executed when previous play completed
    - name: Remove bootstrap_completed flag for the current play if the previous play succeeded
      file:
        path: "{{ bootstrap_completed_flag }}"
        state: absent
      become: yes

    - name: Turn on initial_db_populated flag
      set_fact:
        initial_db_populated: true
    when: not incomplete_bootstrap

  # The previous play failed but the one before that did. Execute the following
  # block if initial db population completed.
  - block:
    - name: Find previous config file for this host
      stat:
        path: "{{ last_bootstrap_config_file }}"
      register: last_config_file

    - block:  # exexcuted if the last config file exists
      - name: Turn on last_config_file_exists flag
        set_fact:
          last_config_file_exists: true

      - name: Set last config file to import (local)
        set_fact:
          last_config: "{{ last_bootstrap_config_file }}"
        when: inventory_hostname == 'localhost'

      # Currently Ansible include_vars only works with local file.
      - block:
        # Give a host specific name in case the playbook is used to bootstrap
        # multiple remote hosts simultaneously
        - name: Set last config file to import (remote)
          set_fact:
            last_config: "/tmp/{{ (last_bootstrap_config_file | basename | splitext)[0] }}_{{ inventory_hostname }}.yml"

        - name: Fetch previous config file from this host
          fetch:
            src: "{{ last_bootstrap_config_file }}"
            dest: "{{ last_config }}"
            flat: yes
        when: inventory_hostname != 'localhost'

      - name: Read in last config values
        include_vars:
          file: "{{ last_config }}"

      - name: Validate and parse previous dual-stack subnets into primary and secondary
        include_tasks: roles/common/validate-addresses/tasks/validate_and_parse_dual_stack.yml
        with_dict:
          prev_management_subnet: "{{ prev_management_subnet }}"
          prev_cluster_host_subnet: "{{ prev_cluster_host_subnet }}"
          prev_cluster_pod_subnet: "{{ prev_cluster_pod_subnet }}"
          prev_cluster_service_subnet: "{{ prev_cluster_service_subnet }}"
          prev_external_oam_subnet: "{{ prev_external_oam_subnet }}"
          prev_management_multicast_subnet: "{{ prev_management_multicast_subnet }}"
          prev_admin_subnet: "{{ prev_admin_subnet }}"
        loop_control:
          loop_var: network_param
        when: network_param.value != "undef"

      - name: Validate and parse previous dual-stack addresses into primary and secondary
        include_tasks: roles/common/validate-addresses/tasks/validate_and_parse_dual_stack.yml
        with_dict:
          prev_external_oam_gateway_address: "{{ prev_external_oam_gateway_address }}"
          prev_external_oam_floating_address: "{{ prev_external_oam_floating_address }}"
          prev_management_floating_address: "{{ prev_management_floating_address }}"
          prev_management_start_address: "{{ prev_management_start_address }}"
          prev_management_end_address: "{{ prev_management_end_address }}"
          prev_cluster_host_start_address: "{{ prev_cluster_host_start_address }}"
          prev_cluster_host_end_address: "{{ prev_cluster_host_end_address }}"
          prev_cluster_host_floating_address: "{{ prev_cluster_host_floating_address }}"
          prev_cluster_pod_start_address: "{{ prev_cluster_pod_start_address }}"
          prev_cluster_pod_end_address: "{{ prev_cluster_pod_end_address }}"
          prev_cluster_service_start_address: "{{ prev_cluster_service_start_address }}"
          prev_cluster_service_end_address: "{{ prev_cluster_service_end_address }}"
          prev_external_oam_start_address: "{{ prev_external_oam_start_address }}"
          prev_external_oam_end_address: "{{ prev_external_oam_end_address }}"
          prev_admin_start_address: "{{ prev_admin_start_address }}"
          prev_admin_end_address: "{{ prev_admin_end_address }}"
          prev_admin_floating_address: "{{ prev_admin_floating_address }}"
          prev_management_multicast_start_address: "{{ prev_management_multicast_start_address }}"
          prev_management_multicast_end_address: "{{ prev_management_multicast_end_address }}"
          prev_external_oam_node_0_address: "{{ prev_external_oam_node_0_address }}"
          prev_external_oam_node_1_address: "{{ prev_external_oam_node_1_address }}"
        loop_control:
          loop_var: network_param
        when: network_param.value != "undef" and network_param.value != "derived"

      - name: Assign dual_stack_network_params to prev_network_params
        set_fact:
          prev_network_params: >-
                            {{ dual_stack_network_params }}
          dual_stack_network_params: { }

      - debug:
          msg:
            - previous dual-stack parsed {{ prev_network_params }}

      # set the previous primary default addresses based on the previous primary subnet values
      - name: Set default previous start primary addresses based on provided previous primary subnets
        set_fact:
          default_prev_management_start_address_primary: "{{ (prev_network_params.prev_management_subnet_primary |
                                                              ipaddr(1)).split('/')[0] }}"
          default_prev_cluster_host_start_address_primary: "{{ (prev_network_params.prev_cluster_host_subnet_primary |
                                                              ipaddr(1)).split('/')[0] }}"

      # set the previous secondary default addresses based on the previous secondary subnet values
      - name: Set default previous start secondary addresses based on provided previous secondary subnets
        set_fact:
          default_prev_management_start_address_secondary: "{{ False if (not prev_network_params.
                                                                         prev_management_subnet_secondary)
                                                                     else (prev_network_params.
                                                                           prev_management_subnet_secondary |
                                                                           ipaddr(1)).split('/')[0] }}"
          default_prev_cluster_host_start_address_secondary: "{{ False if (not prev_network_params.
                                                                           prev_cluster_host_subnet_secondary)
                                                                       else (prev_network_params.
                                                                             prev_cluster_host_subnet_secondary |
                                                                             ipaddr(1)).split('/')[0] }}"

      # set the previous default addresses based on the previous admin subnet values
      - name: Set default previous start primary and secondary addresses based on provided previous admin subnets
        set_fact:
          default_prev_admin_start_address_primary: "{{ (prev_network_params.prev_admin_subnet_primary |
                                                              ipaddr(1)).split('/')[0] }}"
          default_prev_admin_start_address_secondary: "{{ False if (not prev_network_params.prev_admin_subnet_secondary)
                                                                else (prev_network_params.prev_admin_subnet_secondary |
                                                                      ipaddr(1)).split('/')[0] }}"
        when: prev_admin_network|bool == true

      - name: Turn on system attributes reconfiguration flag
        set_fact:
          system_config_update: true
        when: (prev_system_mode != system_mode) or
              (prev_timezone != timezone) or
              (prev_dns_servers.split(',') | sort != dns_servers | sort) or
              (prev_distributed_cloud_role != distributed_cloud_role)

      - name: Convert previous docker no proxy config value for comparison
        set_fact:
          prev_docker_no_proxy:
            "{{ (prev_docker_no_proxy.split(',') | sort) if prev_docker_no_proxy else [] }}"

      - name: If replayed, don't change K8S and ETCD CA filepaths if content doesn't change
        include_tasks: verify_k8s_etcd_certs_changed.yml

      - name: Remove 'password' keys from prev_docker_registries before comparing with docker_registries
        set_fact:
          prev_docker_registries: >-
            {{
              prev_docker_registries
              | combine({item.key: item.value
                | combine({
                  'password': omit
                })
              },
              recursive=True)
            }}
        with_dict: "{{ prev_docker_registries }}"

      - name: Turn on docker reconfiguration flag if docker config is changed
        set_fact:
          docker_config_update: true
        when: (prev_docker_registries != docker_registries) or
              ((use_docker_proxy) and
               (prev_docker_http_proxy != docker_http_proxy or
                prev_docker_https_proxy != docker_https_proxy or
                prev_docker_no_proxy != docker_no_proxy | sort)) or
              (prev_apiserver_cert_sans != apiserver_cert_sans) or
              (prev_k8s_root_ca_cert != k8s_root_ca_cert) or
              (prev_k8s_root_ca_key != k8s_root_ca_key) or
              (prev_etcd_root_ca_cert != etcd_root_ca_cert) or
              (prev_etcd_root_ca_key != etcd_root_ca_key)

      - name: Turn on service endpoints reconfiguration flag if management and/or oam network config is changed
        set_fact:
          reconfigure_endpoints: true
        when: (prev_management_subnet != management_subnet) or
              (prev_management_start_address != management_start_address) or
              (prev_external_oam_subnet != external_oam_subnet) or
              (prev_external_oam_gateway_address != external_oam_gateway_address) or
              (prev_external_oam_floating_address != external_oam_floating_address) or
              (prev_external_oam_start_address != external_oam_start_address) or
              (prev_external_oam_end_address != external_oam_end_address) or
              (prev_external_oam_node_0_address != external_oam_node_0_address) or
              (prev_external_oam_node_1_address != external_oam_node_1_address) or
              (admin_network is defined and prev_admin_subnet != admin_subnet) or
              (prev_admin_start_address != admin_start_address)

      - name: Turn on service endpoints reconfiguration flag if distributed_cloud_role is changed
        set_fact:
          reconfigure_endpoints: true
          dc_role_changed: true
        when: distributed_cloud_role == 'systemcontroller' and
              prev_distributed_cloud_role != distributed_cloud_role

      - name: Turn on etcd reconfiguration if ETCD root CA filenames changed.
        set_fact:
          etcd_root_ca_changed: true
        when: (prev_etcd_root_ca_cert != etcd_root_ca_cert) or
              (prev_etcd_root_ca_key != etcd_root_ca_key)

      - name: Turn on network reconfiguration flag if any of the network related config is changed
        set_fact:
          network_config_update: true
        when: reconfigure_endpoints or
              (prev_management_dynamic_address_allocation != management_dynamic_address_allocation) or
              (prev_cluster_host_dynamic_address_allocation != cluster_host_dynamic_address_allocation) or
              (prev_management_end_address != management_end_address) or
              (prev_pxeboot_subnet != pxeboot_subnet) or
              (prev_pxeboot_start_address != pxeboot_start_address) or
              (prev_pxeboot_end_address != pxeboot_end_address) or
              (prev_management_multicast_subnet != management_multicast_subnet) or
              (prev_management_multicast_start_address != management_multicast_start_address) or
              (prev_management_multicast_end_address != management_multicast_end_address) or
              (prev_cluster_host_subnet != cluster_host_subnet) or
              (prev_cluster_host_start_address != cluster_host_start_address) or
              (prev_cluster_host_end_address != cluster_host_end_address) or
              (prev_cluster_pod_subnet != cluster_pod_subnet) or
              (prev_cluster_pod_start_address != cluster_pod_start_address) or
              (prev_cluster_pod_end_address != cluster_pod_end_address) or
              (prev_cluster_service_subnet != cluster_service_subnet) or
              (prev_cluster_service_start_address != cluster_service_start_address) or
              (prev_cluster_service_end_address != cluster_service_end_address) or
              (admin_network is defined and prev_admin_subnet != admin_subnet) or
              (prev_admin_start_address != admin_start_address) or
              (prev_admin_end_address != admin_end_address)

      - name: Turn on restart services flag if management/oam/cluster network or docker config is changed
        set_fact:
          restart_services: true
        when: reconfigure_endpoints or
              docker_config_update or
              (prev_cluster_host_subnet != cluster_host_subnet) or
              (prev_cluster_pod_subnet != cluster_pod_subnet) or
              (prev_cluster_service_subnet != cluster_service_subnet)

      - name: Turn on restart services flag if Kubernetes OpenID or extraArgs or extraVolumes are changed
        set_fact:
          restart_services: true
        when: (prev_apiserver_oidc|default({})) != (apiserver_oidc) or kube_extra_config_changed

      # Re-evaluate the condition to persist config data to sysinv database
      - name: Turn off save_config_to_db flag
        set_fact:
          save_config_to_db: false
        when: not system_config_update and
              not network_config_update and
              not docker_config_update and
              not incomplete_bootstrap

      when: last_config_file.stat.exists
    when: initial_db_populated
  when: replayed  # bootstrap manifest has been applied

- name: Check volume groups
  command: vgdisplay cgts-vg
  register: vg_result
  become: yes

- name: Check size of root disk
  script: check_root_disk_size.py {{ standard_root_disk_size }}
  register: disk_size_check_result
  failed_when: false
  become: yes

# If StarlingX in OpenStack Nova VM(QEMU/KVM environment),
# skip the platform backup partition check as backup&restore
# is not supported
- block:
  - name: Check for valid Platform Backup partition
    command: "/usr/bin/validate-platform-backup.sh"
    register: validate_result
    failed_when: false
    become: yes

  - name: Fail if Platform Backup partition is not valid
    fail:
      msg: "Platform Backup partition is not valid.
            Error log: {{ validate_result.stdout }}"
    when: validate_result.rc != 0
  when: >
    (system_mode == 'simplex' and
     virtual_system is defined and
     not virtual_system|bool)

# Filter out the preceding blank line(s) from the output of remote execution
# of check_root_disk_size.py with escalated privilege remotely - a workaround
# for an Ansible bug/quirk.
- name: Filter out blank lines from disk size check output
  set_fact:
    disk_size_result: |
      {% set disk_size_result = [] %}
      {% for l in disk_size_check_result.stdout_lines %}
      {% if l != "" %}
      {% set _ = disk_size_result.append(l) %}
      {% endif %}
      {% endfor %}
      {{ disk_size_result }}

- debug: var=disk_size_check_result
- debug: var=disk_size_result

# The expected result, after preceding blank line(s) is filtered out, is it
# must contain at least 2 lines, one is the root disk path and the other
# the root disk size. For instance:
#
# a) if root disk size is smaller than the specified standard root disk size,
# /dev/sdb
# 500
# Traceback (most recent call last):
#   File "/usr/share/ansible/stx-ansible...."
#       raise Exception("Failed validation!")
#       Exception: Failed validation!
#
# b) if the root size is larger or equal to the specified standard root disk size:
# /dev/sdb
#  500
- name: Fail if disk size check returned unexpected result
  fail:
    msg: "Disk size check script returned unexpected result {{ disk_size_check_result.stdout_lines }}"
  when: (disk_size_result|length < 2 or
         disk_size_result[1]|int == 0)

- name: Set root disk and root disk size facts
  set_fact:
    root_disk: "{{ disk_size_result[0] }}"
    root_disk_size: "{{ disk_size_result[1] }}"

- debug:
    msg: >-
       [WARNING]: Root disk {{ root_disk }} size is {{ root_disk_size }}GB which is
       less than the standard size of {{ standard_root_disk_size }}GB. Please consult
       the Software Installation Guide for details.
  when: disk_size_check_result.rc != 0

# Do restore related preparation
- include_tasks: restore_prep_tasks.yml
  when: mode == 'restore'

- name: Look for branding tar file
  find:
    paths: /opt/branding
    patterns: '*.tgz'
  register: find_tar_result

- name: Fail if there are more than one branding tar files
  fail:
    msg: >-
         Only one branding tarball is permitted in /opt/branding. Refer to
         the branding section of the documentation.
  when: find_tar_result.matched > 1

- name: Look for other branding files
  find:
    paths: /opt/branding
    excludes: '*.tgz,applied'
  register: find_result

- name: Fail if the branding filename is not valid
  fail:
    msg: >
      {{ find_result.files[0].path }} is not a valid branding
      filename. Refer to the branding section of the documentation.
  when: find_result.matched > 0

- block:
  - name: Check the stat of the specified bootstrap registry filesystem
    stat:
      path: "{{ bootstrap_registry_filesystem_fqpn }}"
    register: bootstrap_registry_filesystem_stat

  - name: Ensure that the specified bootstrap registry filesystem exists
    fail:
      msg: >-
        Bootstrap registry filesystem did not exist: {{ bootstrap_registry_filesystem_fqpn }}
    when: not bootstrap_registry_filesystem_stat.stat.exists
  when: bootstrap_registry_filesystem_fqpn is not none

- block:
  # If bootstrap_registry_filesystem_fqpn value is not already specified via
  # extra vars (-e), point it to the registry filesystem archive in prestage
  # directory if exists.
  - name: Check if the prestaged registry filesystem exists
    stat:
      path: "{{ images_archive_dir }}/local_registry_filesystem.tgz"
    register: prestage_registry_filesystem

  - name: Set bootstrap_registry_filesystem_fqpn fact to the prestaged registry filesystem
    set_fact:
      bootstrap_registry_filesystem_fqpn: "{{ prestage_registry_filesystem.stat.path }}"
    when: prestage_registry_filesystem.stat.exists
  when: bootstrap_registry_filesystem_fqpn is none

- name: Enable populating registry filesystem
  set_fact:
    bootstrap_registry_filesystem: true
  when: bootstrap_registry_filesystem_fqpn

- name: Mark environment as Ansible bootstrap
  file:
    path: /var/run/.ansible_bootstrap
    state: touch
  become: yes

# Set up the remote tmp dir beforehand to get rid of the annoying warning
# when pipelining is turned on for better performance.
- name: Set up Ansible remote tmp dir
  file:
    path: "{{ ansible_remote_tmp }}"
    state: directory
    owner: sysadmin
    group: sys_protected
    mode: 0755
  become: yes

- debug:
    msg: >-
      system_config_update flag: {{ system_config_update }},
      network_config_update flag: {{ network_config_update }},
      docker_config_update flag: {{ docker_config_update }},
      restart_services flag:  {{ restart_services }},
      endpoints_reconfiguration_flag: {{ reconfigure_endpoints }},
      save_password flag: {{ save_password }},
      save_config_to_db flag: {{ save_config_to_db }},
      incomplete_bootstrap flag: {{ incomplete_bootstrap }},
      initial_db_populated_flag: {{ initial_db_populated }},
      dc_role_changed_flag: {{ dc_role_changed }}
      etcd_root_ca_changed flag: {{ etcd_root_ca_changed }}
