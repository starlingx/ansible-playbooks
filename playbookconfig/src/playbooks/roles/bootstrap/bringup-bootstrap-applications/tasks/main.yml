---
#
# Copyright (c) 2023-2025 Wind River Systems, Inc.
#
# SPDX-License-Identifier: Apache-2.0
#
# ROLE DESCRIPTION:
#   This role is to bring up system applications
#

# we need to restart sysinv conductor here because it seem to be caching old data
# this prevents it from interacting with a fresh kubernetes cluster. For example,
# if the user changes OAM network and forces the kubernetes cluster to be torn down
# and brought up again.
- name: Restart sysinv conductor
  systemd:
    name: sysinv-conductor
    state: restarted

- pause:
    seconds: 30

# Apply sequence for essential applications is being hardcoded as opposed to
# maintained in a list to prevent the user from overriding it.
# Order has to be ensured, nginx needs to be applied before cert-manager.
- name: Apply essential applications
  include_tasks: upload_and_apply_application.yml
  with_items:
    - nginx-ingress-controller
    - cert-manager
  vars:
    searched_app_name: "{{ item }}"
  when: mode != 'restore'

# While FluxCD indicates pods are ready, some bugs were raised indicating
# cert-manager webhook validation is not fully setup. Adding an indirect check
# here to test a certificate issuer
- name: Test cert-manager resource creation
  import_tasks: test_cert_manager_creation.yml
  when: mode != 'restore'

# Create a generic namespace to be shared by deployed platform resources as needed
# and copy default-registry-key
- name: Create 'deployment' namespace
  shell: kubectl --kubeconfig=/etc/kubernetes/admin.conf create namespace deployment --dry-run -o yaml |
          kubectl --kubeconfig=/etc/kubernetes/admin.conf apply -f -

# The following labels are used by pod security admission controller
- name: Add pod security labels to the deployment namespace
  command: kubectl --kubeconfig=/etc/kubernetes/admin.conf
           label --overwrite namespaces deployment
           pod-security.kubernetes.io/audit-version=latest
           pod-security.kubernetes.io/enforce-version=latest
           pod-security.kubernetes.io/warn-version=latest
           pod-security.kubernetes.io/audit=privileged
           pod-security.kubernetes.io/enforce=privileged
           pod-security.kubernetes.io/warn=privileged

# Check if there is a default-registry-key for kube-system and create it when
# there is not during platform-restore process
- block:
  - name: Get kube-system default registry key
    command: >-
      kubectl --kubeconfig=/etc/kubernetes/admin.conf get secret default-registry-key --namespace=kube-system
    failed_when: false
    register: kube_system_default_registry_key

  - name: Create kube-system default registry key
    command: >-
      kubectl -n kube-system create secret docker-registry default-registry-key
        --docker-server={{ local_registry }}
        --docker-username={{ local_registry_credentials['username'] }}
        --docker-password={{ local_registry_credentials['password'] }}
    environment:
      KUBECONFIG: "/etc/kubernetes/admin.conf"
    when: kube_system_default_registry_key.rc != 0

  when: mode == 'restore'

- name: Get deployment namespace default registry key
  command: >-
    kubectl --kubeconfig=/etc/kubernetes/admin.conf get secret default-registry-key --namespace=deployment
  failed_when: false
  register: get_deployment_default_registry_key

- name: Copy default-registry-key to deployment namespace
  shell: >-
    kubectl get secret default-registry-key --namespace=kube-system -o yaml
    | sed 's/namespace: kube-system/namespace: deployment/'
    | kubectl apply --namespace=deployment -f -
  environment:
    KUBECONFIG: "/etc/kubernetes/admin.conf"
  when: get_deployment_default_registry_key.stdout == ""

# Create DC CA and set up subcloud admin endpoint certificates for bootstrap mode.
- block:
  - name: Create distributed cloud CA
    include_tasks: create_dc_ca.yml
    when: distributed_cloud_role == 'systemcontroller'

  - name: Set up subcloud admin endpoints certificates if host is a subcloud
    include_role:
      name: common/setup-subcloud-adminep-certs
    vars:
      ansible_become: yes
    when: distributed_cloud_role == 'subcloud'

  when: mode == 'bootstrap'

- include_role:
    name: common/install-platform-certificates

# Set the required overrides for the oidc-auth-apps
- name: Setup oidc-auth-apps default requirements
  include_tasks: setup_oidc_auth_apps_requirements.yml
  when: distributed_cloud_role != 'subcloud'

# To apply oidc-auth-apps, it's needed common/install-platform-certificates
# to be done due the required oidc-auth-apps-certificate
- name: Apply oidc-auth-apps
  include_tasks: upload_and_apply_application.yml
  with_items:
    - oidc-auth-apps
  vars:
    searched_app_name: "{{ item }}"
  when:
    - mode != 'restore'
    - distributed_cloud_role != 'subcloud'

- name: Upload and apply user defined applications
  include_tasks: upload_and_apply_user_applications.yml
  when:
    - mode != 'restore'
    - applications | length > 0

- name: Remove config file from previous play
  file:
    path: "{{ last_bootstrap_config_file }}"
    state: absent

- name: Save the current system and network config for reference in subsequent replays
  template:
    src: last_bootstrap_config.j2
    dest: "{{ last_bootstrap_config_file }}"
