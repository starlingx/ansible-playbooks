---
#
# Copyright (c) 2019-2024 Wind River Systems, Inc.
#
# SPDX-License-Identifier: Apache-2.0
#
# SUB-TASKS DESCRIPTION:
#   Shut down flock services, helm, kubernetes and revert configurations
#   against loopback interface upon network/docker config changes.
#

- block:  # Shut down essential flock services
  - name: Shutdown Maintenance services
    command: /usr/lib/ocf/resource.d/platform/mtcAgent stop

  - name: Shutdown FM services
    command: "{{ item }}"
    with_items:
      - /etc/init.d/fminit stop
      - /etc/init.d/fm-api stop

  environment:
    OCF_ROOT: "/usr/lib/ocf"
    OCF_RESKEY_state: "active"


- block:  # Revert changes done by kubeadm init, clear data cache
  - name: Check if Kubernetes master has been initialized
    stat:
      path: /etc/kubernetes/admin.conf
    register: k8s_admin_conf

  - block:
    # kubeadm reset command executes slowly (takes ~25mins) if etcd is not
    # running. To prevent this, temporarily start etcdserver and delete stale
    # kube-apiserver pod so that new certificates are used when
    # kube-apiserver is restarted.
    - name: Copy kube-apiserver etcd client cert file to kubeadm_pki_dir
      copy:
        src: "/etc/etcd/apiserver-etcd-client.crt"
        dest: "{{ kubeadm_pki_dir }}/apiserver-etcd-client.crt"
        remote_src: yes
        force: yes
        mode: '0644'

    - name: Copy kube-apiserver etcd client key file to kubeadm_pki_dir
      copy:
        src: "/etc/etcd/apiserver-etcd-client.key"
        dest: "{{ kubeadm_pki_dir }}/apiserver-etcd-client.key"
        remote_src: yes
        force: yes
        mode: '0600'

    - name: Start etcd server
      systemd:
        name: etcd
        state: started

    - name: Get kube-apiserver pod ID
      shell: crictl pods --name kube-apiserver --state Ready --quiet
      register: kube_apiserver_pod_id

    - name: Delete stale kube-apiserver pod to ensure new one picks up new etcd client certs
      shell: "{{ item }}"
      with_items:
        - "crictl stopp {{ kube_apiserver_pod_id.stdout }}"
        - "crictl rmp {{ kube_apiserver_pod_id.stdout }}"

    - name: Shut down and remove Kubernetes components
      command: kubeadm --kubeconfig=/etc/kubernetes/admin.conf reset -f --cri-socket /var/run/containerd/containerd.sock
      register: reset_info
    when: k8s_admin_conf.stat.exists

  - debug: var=reset_info.stdout_lines

  # Cleanup kubelet-lv
  # Due to https://github.com/kubernetes/kubeadm/issues/1294 kubeadm will
  # unmount /var/lib/kubelet. We need to remount the kubelet-lv and remove its
  # contents.
  # That bug was re-broken by this commit in k8s 1.16
  # https://github.com/kubernetes/kubernetes/commit/6845c66efbb888d2f73e1a1c17f0e06b34d8e261
  - name: Mount kubelet-lv
    command: bash -c 'mountpoint -q /var/lib/kubelet || mount /var/lib/kubelet'
    args:
      warn: false

  # it looks like k8s 1.16 unmounts the folder before clearing it
  - name: Clear kubelet data
    shell: /bin/rm -rf /var/lib/kubelet/*
    args:
      warn: false

  - name: Clear etcd data cache
    shell: /bin/rm -rf /opt/etcd/{{ software_version }}/controller.etcd/*
    args:
      warn: false

  - block:
    - name: Stop etcd
      systemd:
        name: etcd
        state: stopped

    rescue:
      - name: Etcd failed to stop, try one more time
        systemd:
          name: etcd
          state: stopped

  # Mark Kubernetes config as incomplete by removing
  # the .initial_k8s_config_complete file.
  - name: Mark Kubernetes config incomplete
    file:
      path: "/etc/platform/.initial_k8s_config_complete"
      state: absent


- block:  # Revert configuration to loopback interface
  - name: Set facts derived from previous network configurations
    set_fact:
      prev_management_subnet_prefix: "{{ prev_network_params.prev_management_subnet_primary | ipaddr('prefix') }}"
      prev_controller_floating_address:
        "{{ default_prev_management_start_address_primary
        if prev_management_start_address == 'derived' else prev_network_params.prev_management_start_address_primary }}"
      prev_cluster_floating_address:
        "{{ default_prev_cluster_host_start_address_primary
        if prev_cluster_host_start_address == 'derived' else prev_network_params.prev_cluster_host_start_address_primary }}"
      prev_cluster_subnet_prefix: "{{ prev_network_params.prev_cluster_host_subnet_primary | ipaddr('prefix') }}"
      prev_controller_pxeboot_floating_address:
        "{{ (prev_pxeboot_subnet | ipaddr(1)).split('/')[0]
        if prev_pxeboot_start_address == 'derived' else prev_pxeboot_start_address }}"
      prev_pxe_subnet_prefix: "{{ prev_pxeboot_subnet | ipaddr('prefix') }}"

  # set facts for secondary if defined/exists
  - block:
    - name: Set secondary management facts derived from previous network configurations
      set_fact:
        prev_management_subnet_prefix_secondary: "{{ prev_network_params.prev_management_subnet_secondary |
                                                     ipaddr('prefix') }}"
        prev_controller_floating_address_secondary:
          "{{ default_prev_management_start_address_secondary
          if prev_management_start_address == 'derived' else prev_network_params.prev_management_start_address_secondary }}"
        prev_mgmt_broadcast_secondary: "{{ prev_network_params.prev_management_subnet_secondary | ipaddr('broadcast') }}"
      when: prev_network_params.prev_management_subnet_secondary

    - name: Set secondary cluster-host facts derived from previous network configurations
      set_fact:
        prev_cluster_floating_address_secondary:
          "{{ default_prev_cluster_host_start_address_secondary
          if prev_cluster_host_start_address == 'derived'
          else prev_network_params.prev_cluster_host_start_address_secondary }}"
        prev_cluster_subnet_prefix_secondary: "{{ prev_network_params.prev_cluster_host_subnet_secondary |
                                                  ipaddr('prefix') }}"
      when: prev_network_params.prev_cluster_host_subnet_secondary

  - name: Set facts derived from previous admin network configuration
    set_fact:
      prev_admin_subnet_prefix: "{{ prev_network_params.prev_admin_subnet_primary | ipaddr('prefix') }}"
      prev_controller_admin_floating_address:
        "{{ default_prev_admin_start_address_primary
        if prev_admin_start_address == 'derived' else prev_network_params.prev_admin_start_address_primary }}"
    when: (admin_network is defined and (prev_admin_network|bool == true))

  - name: Set CIDR fact derived from previous admin network configuration
    set_fact:
      prev_admin_floating_virtual: "{{ prev_controller_admin_floating_address }}/{{ prev_admin_subnet_prefix }}"
    when: (admin_network is defined and (prev_admin_network|bool == true))

  # set facts for secondary if defined/exists
  - block:
    - name: Set facts derived from previous secondary admin network configuration
      set_fact:
        prev_admin_subnet_prefix_secondary: "{{ prev_network_params.prev_admin_subnet_secondary | ipaddr('prefix') }}"
        prev_controller_admin_floating_address_secondary:
          "{{ default_prev_admin_start_address_secondary
          if prev_admin_start_address == 'derived' else prev_network_params.prev_admin_start_address_secondary }}"
      when: (admin_network is defined and
             (prev_admin_network|bool == true) and
             prev_network_params.prev_admin_subnet_secondary)

    - name: Set CIDR fact derived from previous secondary admin network configuration
      set_fact:
        prev_admin_floating_virtual_secondary: "{{ prev_controller_admin_floating_address_secondary
                                                }}/{{ prev_admin_subnet_prefix_secondary }}"
      when: (admin_network is defined and
             (prev_admin_network|bool == true) and
             prev_network_params.prev_admin_subnet_secondary)

  - name: Set facts derived from previous floating addresses
    set_fact:
      prev_controller_0_address: "{{ prev_controller_floating_address|ipmath(1) }}"
      prev_controller_0_cluster_host: "{{ prev_cluster_floating_address|ipmath(1) }}"

  - name: Set facts for the removal of addresses assigned to loopback interface
    set_fact:
      prev_mgmt_floating_virtual: "{{ prev_controller_floating_address }}/{{ prev_management_subnet_prefix }}"
      prev_cluster_floating_virtual: "{{ prev_cluster_floating_address }}/{{ prev_cluster_subnet_prefix }}"
      prev_pxe_virtual: "{{ prev_controller_pxeboot_floating_address }}/{{ prev_pxe_subnet_prefix }}"
      prev_mgmt_virtual: "{{ prev_controller_0_address }}/{{ prev_management_subnet_prefix }}"
      prev_cluster_virtual: "{{ prev_controller_0_cluster_host }}/{{ prev_cluster_subnet_prefix }}"

  # set facts for secondary if defined
  - block:
    - name: Set facts derived from previous secondary floating address
      set_fact:
        prev_controller_0_address_secondary: "{{ prev_controller_floating_address_secondary|ipmath(1) }}"
      when: prev_controller_floating_address_secondary is defined

    - name: Set facts derived from previous secondary cluster-host floating address
      set_fact:
        prev_controller_0_cluster_host_secondary: "{{ prev_cluster_floating_address_secondary|ipmath(1) }}"
      when: prev_cluster_floating_address_secondary is defined

    # Set facts for the removal of secondary addresses assigned to loopback interface
    - block:
      - name: Set facts for the removal of secondary mgmt floating assigned to loopback interface
        set_fact:
          prev_mgmt_floating_virtual_secondary: "{{ prev_controller_floating_address_secondary
                                                 }}/{{ prev_management_subnet_prefix_secondary }}"
        when: prev_controller_floating_address_secondary is defined and prev_management_subnet_prefix_secondary is defined

      - name: Set facts for the removal of secondary cluster floating assigned to loopback interface
        set_fact:
          prev_cluster_floating_virtual_secondary: "{{ prev_cluster_floating_address_secondary
                                                    }}/{{ prev_cluster_subnet_prefix_secondary }}"
        when: prev_cluster_floating_address_secondary is defined and prev_cluster_subnet_prefix_secondary is defined

      - name: Set facts for the removal of secondary mgmt assigned to loopback interface
        set_fact:
          prev_mgmt_virtual_secondary: "{{ prev_controller_0_address_secondary
                                        }}/{{ prev_management_subnet_prefix_secondary }}"
        when: prev_controller_0_address_secondary is defined and prev_management_subnet_prefix_secondary is defined

      - name: Set facts for the removal of secondary cluster assigned to loopback interface
        set_fact:
          prev_cluster_virtual_secondary: "{{ prev_controller_0_cluster_host_secondary
                                           }}/{{ prev_cluster_subnet_prefix_secondary }}"
        when: prev_controller_0_cluster_host_secondary is defined and prev_cluster_subnet_prefix_secondary is defined

  # Remove previous addresses associated with lo interface except the previous mgmt floating address
  # and previous mgmt virtual address as we still need sysinv-api to be reachable at the previous
  # addresses until the service endpoints are reconfigured.
  - name: Prepare removal items -- Remove loopback interface in sysinv db and associated addresses
    set_fact:
      remove_items:
        - source /etc/platform/openrc; system host-if-delete controller-0 lo
        - "ip addr delete {{ prev_cluster_floating_virtual }} dev lo scope host"
        - "ip addr delete {{ prev_pxe_virtual }} dev lo scope host"
        - "ip addr delete {{ prev_cluster_virtual }}  brd {{ cluster_broadcast }} dev lo:5 scope host"

  - name: Add admin address of the loopback interface on removal list
    set_fact:
      remove_items: "{{ remove_items + [item] }}"
    with_items:
      - "ip addr delete {{ prev_admin_floating_virtual }} brd {{ admin_broadcast }} dev lo:8 scope host"
    when: (admin_network is defined and (prev_admin_network|bool == true))

  # add secondary addresses for removal
  - block:
    - name: Add secondary cluster floating of the loopback interface on removal list
      set_fact:
        remove_items: "{{ remove_items + [item] }}"
      with_items:
        - "ip addr delete {{ prev_cluster_floating_virtual_secondary }} dev lo scope host"
      when: prev_cluster_floating_virtual_secondary is defined

    - name: Add secondary cluster floating of the loopback interface on removal list
      set_fact:
        remove_items: "{{ remove_items + [item] }}"
      with_items:
        - "ip addr delete {{ prev_cluster_virtual_secondary }}  brd {{
          cluster_broadcast_secondary }} dev lo:5 scope host"
      when: prev_cluster_virtual_secondary is defined and cluster_broadcast_secondary is defined

    - name: Add secondary admin address of the loopback interface on removal list
      set_fact:
        remove_items: "{{ remove_items + [item] }}"
      with_items:
        - "ip addr delete {{ prev_admin_floating_virtual_secondary }} brd {{
          admin_broadcast_secondary }} dev lo:8 scope host"
      when: (admin_network is defined and (prev_admin_network|bool == true)
              and prev_admin_floating_virtual_secondary is defined
              and admin_broadcast_secondary is defined)

  - name: Remove loopback interface in sysinv db and associated addresses
    shell: "{{ item }}"
    register: remove_addresses
    failed_when: false
    with_items: "{{ remove_items }}"

  - name: Fail if removing interface addresses failed for reason other than it has been done already
    fail:
      msg: "{{ item.item }} failed for reason: {{ item.stderr }}."
    when: item.rc != 0 and not incomplete_bootstrap
    with_items: "{{ remove_addresses.results }}"

  when: last_config_file_exists
