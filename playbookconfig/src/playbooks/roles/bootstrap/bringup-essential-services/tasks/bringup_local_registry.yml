---
#
# Copyright (c) 2019-2024 Wind River Systems, Inc.
#
# SPDX-License-Identifier: Apache-2.0
#
# SUB-TASKS DESCRIPTION:
#   Bring up local registry
#   - Set up docker registry certificate and keys required
#   - Start registry token server
#   - Start local registry

- block:
  - name: Set network info for docker registry
    set_fact:
      docker_registry_ip: "{{ controller_floating_address }}"
      docker_registry_public_ip: "{{ network_params.external_oam_floating_address_primary }}"

  # Set secondary network info for docker registry
  - block:
    - name: Set secondary network info for docker registry
      set_fact:
        docker_registry_ip_secondary: "{{ controller_floating_address_secondary }}"
      when: controller_floating_address_secondary is defined

    - name: Set secondary network info for docker registry
      set_fact:
        docker_registry_public_ip_secondary: "{{ network_params.external_oam_floating_address_secondary }}"
      when: network_params.external_oam_floating_address_secondary

  - name: Generate cnf file from template
    template:
      src: "registry-cert-extfile.j2"
      dest: "{{ cert_cnf_file }}"

  - name: Generate certificate and key files
    command: >-
      openssl req -x509 -sha256 -nodes -days 365 -newkey rsa:2048 -keyout {{ registry_cert_key }}
      -out {{ registry_cert_crt }} -config {{ cert_cnf_file }}

  - name: Generate pkcs1 key file
    command: openssl rsa -in {{ registry_cert_key }} -out {{ registry_cert_pkcs1_key }}

  - name: Remove extfile used in certificate generation
    file:
      path: "{{ cert_cnf_file }}"
      state: absent

  - name: Set certificate file and key permissions to root read-only
    file:
      path: "{{ item }}"
      mode: 0400
    with_items:
      - "{{ registry_cert_key }}"
      - "{{ registry_cert_crt }}"
      - "{{ registry_cert_pkcs1_key }}"

  when: mode == 'bootstrap'

- block:
  - name: Restore certificate and key files
    command: >-
      tar -C /etc/ssl/private -xpf {{ restore_data_file }} --wildcards
      --transform='s,.*/,,' 'etc/ssl/private/*cert*'
      {% for v in legacy_restore_exclude_items %}
      --exclude {{ v | quote }}
      {% endfor %}
    args:
      warn: false

  - name: Check if {{ server_cert_pem }} exists
    stat:
      path: "{{ server_cert_pem }}"
    register: server_cert_pem_stat

  - name: Copy {{ server_cert_pem }} to shared filesystem for mate
    copy:
      src: "{{ server_cert_pem }}"
      dest: "{{ config_permdir }}"
      remote_src: yes
      mode: preserve
    when: server_cert_pem_stat.stat.exists

  when: mode == 'restore'

- name: Copy certificate and keys to shared filesystem for mate
  copy:
    src: "{{ item }}"
    dest: "{{ config_permdir }}"
    remote_src: yes
    mode: preserve
  with_items:
    - "{{ registry_cert_key }}"
    - "{{ registry_cert_crt }}"
    - "{{ registry_cert_pkcs1_key }}"

- name: Create docker certificate directory
  file:
    path: "{{ docker_cert_dir }}/registry.local:9001"
    state: directory
    recurse: yes
    mode: 0700

- name: Copy certificate file to docker certificate directory
  copy:
    src: "{{ registry_cert_crt }}"
    dest: "{{ docker_cert_dir }}/registry.local:9001"
    remote_src: yes
    mode: preserve

- name: Start registry token server
  systemd:
    name: registry-token-server
    state: restarted

- name: Start docker registry
  systemd:
    name: "{{ 'docker-registry' if os_release == 'debian' else 'docker-distribution' }}"
    state: restarted

# the restored /etc/hosts file already contains registry.local
- name: Update /etc/hosts with local registry host
  command: >-
    sed -i -e 's|'$CONTROLLER_ADDRESS'\t'$CONTROLLER'|'$CONTROLLER_ADDRESS'\t'$CONTROLLER'\t'$LOCAL_REGISTRY'|g' /etc/hosts
  args:
    warn: false
  environment:
    CONTROLLER_ADDRESS: "{{ controller_floating_address }}"
    CONTROLLER: "controller"
    LOCAL_REGISTRY: "registry.local"
  when: mode != 'restore'
