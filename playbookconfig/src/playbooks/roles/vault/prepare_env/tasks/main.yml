---
#
# Copyright (c) 2024 Wind River Systems, Inc.
#
# SPDX-License-Identifier: Apache-2.0
#

- name: Set default target where backup tarball inspection takes place
  set_fact:
    inspection_target: "{{ inventory_hostname }}"

# Set inspection target to Ansible control machine if the backup tarball
# is off-box.
- name: Update target if backup data are off-box
  set_fact:
    inspection_target: localhost
  when: on_box_data|bool == false

- name: Set initial_backup_dir if running on target and no value was supplied
  set_fact:
    initial_backup_dir: /opt/platform-backup
  when: (initial_backup_dir is not defined or initial_backup_dir is none) and
        (on_box_data|bool == true)

- name: Validate initial_backup_dir exists
  stat:
    path: "{{ initial_backup_dir }}"
  delegate_to: "{{ inspection_target }}"
  register: initial_backup_dir_exists

- name: Fail if initial_backup_dir does not exists
  fail:
    msg: "Directory initial_backup_dir: {{ initial_backup_dir }} does not exist"
  when: not initial_backup_dir_exists.stat.exists

- name: Set vault backup directory fact for on box
  set_fact:
    vault_backup_dir: "{{ initial_backup_dir }}/hc_vault"
  when: on_box_data|bool == true

- name: Set vault backup directory fact for off box
  set_fact:
    vault_backup_dir: "{{ target_backup_dir }}/hc_vault"
  when: on_box_data|bool == false

- name: Fail if passphrase is omitted
  fail:
    msg: >
      A passphrase is required for encryption; set variable override
      backup_encryption_passphrase.  To disable encryption set
      override backup_encryption_enabled=false
  when:
  - vault_encrypt|bool
  - encrypt_hc_vault_secret | length == 0

- name: Check vault apply for backup
  block:
  - name: Check if vault is applied
    shell: |
      source /etc/platform/openrc
      system application-show vault --format value --column status
    register: vault_applied_exists

  - name: Fail if vault is not applied
    fail:
      msg: "Vault application is not applied"
    when: vault_applied_exists.stdout != "applied"
  when: vault_mode == "backup"

- name: Validate vault health for restore.
  block:
  - name: Transfer backup tarball to {{ target_backup_dir }} on controller-0
    copy:
      src: "{{ initial_backup_dir }}/{{ backup_filename }}"
      dest: "{{ target_backup_dir }}"
      owner: root
      group: root
      mode: 0755
    become: yes
    when: on_box_data | bool == false

  - name: Set backup file path for on box
    set_fact:
      backup_filepath: "{{ initial_backup_dir }}/{{ backup_filename }}"
    when: on_box_data | bool == true

  - name: Set backup file path for off box
    set_fact:
      backup_filepath: "{{ target_backup_dir }}/{{ backup_filename }}"
    when: on_box_data | bool == false

  - name: Find backup tarball
    shell: |
      ls {{ backup_filepath }}
    register: backup_tarball

  - name: Fail if vault backup tarball not found
    fail:
      msg: "Vault snapshot tarball: {{ backup_filename }} was not found"
    when: backup_tarball.stdout | length == 0

  - name: Validate if vault application is ready to be restored
    script: validate_recover_vault.sh
    environment:
      KUBECONFIG: /etc/kubernetes/admin.conf
    register: validate_vault_result
    failed_when: validate_vault_result.rc != 0

  rescue:
    - name: Display vault validation script output if exists
      debug:
        msg: "{{ validate_vault_result.stdout }}"
      when: validate_vault_result is defined
  when: vault_mode == "restore"

- name: Find vault manager pod
  shell: >-
    kubectl get pods -n vault | grep "vault-manager" | cut -d " " -f 1
  register: vault_manager_pod_name
  environment:
    KUBECONFIG: /etc/kubernetes/admin.conf

- name: Fail if vault manager pod is not found
  fail:
    msg: "Vault manager pod is not found"
  when: vault_manager_pod_name.stdout | length == 0

- name: Create vault subdirectory in initial_backup_dir
  file:
    path: "{{ vault_backup_dir }}"
    state: directory
    mode: 0755
  become: yes
