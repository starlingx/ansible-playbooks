---
#
# Copyright (c) 2022-2024 Wind River Systems, Inc.
#
# SPDX-License-Identifier: Apache-2.0
#
# ROLE DESCRIPTION:
#   This role validates user input common to all B&R playbooks
#
- name: Set default target where backup tarball inspection takes place
  set_fact:
    inspection_target: "{{ inventory_hostname }}"

# Set inspection target to Ansible control machine if the backup tarball
# is off-box.
- name: Update target if backup data are off-box
  set_fact:
    inspection_target: localhost
  when: on_box_data|bool == false

# roles/bootstrap/validate-config/tasks/main.yml#L877
# Note that due to Ansible mishandling of boolean values via extra-vars we are
# adding supplementary validation here.
# See: https://github.com/ansible/ansible/issues/17193
- name: Check for Ceph data wipe flag
  fail:
    msg: "wipe_ceph_osds is misconfigured. Valid value is either 'true' or 'false'"
  when: (not wipe_ceph_osds | type_debug == 'bool') and
        (wipe_ceph_osds != 'true') and
        (wipe_ceph_osds != 'false')

- block:
  - name: Non-upgrade path
    block:
      - name: Fail if backup_filename is not defined or set
        fail:
          msg: "Mandatory configuration parameter backup_filename is not defined or set."
        when: backup_filename is not defined or backup_filename is none

      - name: Fail if the backup file is off-box and initial_backup_dir is not specified
        fail:
          msg: "Parameter initial_backup_dir must be specified if the backup tar file is off box."
        when: (initial_backup_dir is not defined or initial_backup_dir is none) and
              (on_box_data|bool == false)

      - name: Set the initial_backup_dir to /opt/platform-backup if not specified and backup file is on the host
        set_fact:
          initial_backup_dir: /opt/platform-backup
        when: (initial_backup_dir is not defined or initial_backup_dir is none) and
              (on_box_data|bool == true)

    when: restore_data_file is not defined

  - name: Upgrade path
    block:
      - name: Determine backup path for upgrade
        set_fact:
          initial_backup_dir: "{{ restore_data_file | dirname }}"
          backup_filename: "{{ restore_data_file | basename }}"

    when: restore_data_file is defined

  - name: Check if backup file exists
    stat:
      path: "{{ initial_backup_dir }}/{{ backup_filename }}"
    register: backup_stat_result

  - name: Validate that replacement MAC address is valid if supplied (lower-case only)
    set_fact:
      replacement_mgmt_mac: "{{ replacement_mgmt_mac | ansible.netcommon.hwaddr }}"
      replacement_mgmt_mac_required: "{{ replacement_mgmt_mac is not none }}"
    failed_when: >
      replacement_mgmt_mac_required and
      replacement_mgmt_mac == ''

  - block:
      - name: Fail if backup file does not exist on the target
        fail:
          msg: "Backup file {{ initial_backup_dir }}/{{ backup_filename }} does not exist on the target."
        when: (on_box_data|bool == true)

      - name: Fail if the backup file does not exist locally
        fail:
          msg: "Backup file {{ initial_backup_dir }}/{{ backup_filename }} does not exist on this machine."
        when: (on_box_data|bool == false)
    when: not backup_stat_result.stat.exists

  - block:
    - name: Set temp directory for remote execution
      set_fact:
        remote_tmp_dir: "{{ ansible_remote_tmp|default('/tmp') }}"
      delegate_to: '{{ inventory_hostname }}'

    - name: Check the {{ remote_tmp_dir }} available space (in Kbytes) on the target
      shell: "df {{ remote_tmp_dir }} --output=avail | tail -1"
      register: tmp_dir_free_space_on_target
      delegate_to: '{{ inventory_hostname }}'

    - name: Check the backup file size (in Kbytes) on this machine
      shell: "du -hsk {{ backup_stat_result.stat.path }} | awk '{print $1}'"
      register: backup_file_size_local

    - name: Fail if {{ remote_tmp_dir }} doesn't have enough space for backup file transfer
      fail:
        msg: "{{ remote_tmp_dir }} doesn't have enough space for backup file
              {{ initial_backup_dir }}/{{ backup_filename }}.
              Use ansible_remote_tmp to choose another directory to stage the backup file."
      when: (tmp_dir_free_space_on_target.stdout | int) - (backup_file_size_local.stdout | int) <= 0

    when: inventory_hostname != 'localhost' and (on_box_data|bool == false)

  - name: Fail if trying to restore user images and registry at same time
    fail:
      msg: Do not use restore_user_images and restore_registry_filesystem at same time
    when: restore_user_images|default(false) and restore_registry_filesystem|default(false)

  - name: Verify if image registry backup is provided
    block:
      - set_fact:
          registry_backup_initial_path: "{{ initial_backup_dir }}/{{ registry_backup_filename }}"

      - name: Check if image registry backup file exists
        stat:
          path: "{{ registry_backup_initial_path }}"
        register: registry_backup_stat_result

      - block:

          - name: Fail if the registry backup file does not exist on the target
            fail:
              msg: "Registry backup file {{ registry_backup_initial_path }} does not exist on the target."
            when: (on_box_data|bool == true)

          - name: Fail if the registry backup file does not exist locally
            fail:
              msg: "Registry backup file {{ registry_backup_initial_path }} does not exist on this machine."
            when: (on_box_data|bool == false)

        when: not registry_backup_stat_result.stat.exists

    when: registry_backup_filename is defined

  - block:
    - name: Check if ssl_ca certificate file exists
      stat:
        path: "{{ ssl_ca_certificate_file }}"
      register: ssl_ca_certificate_stat_result

    - block:
      - name: Fail if ssl_ca certificate file does not exist on the target
        fail:
          msg: "{{ ssl_ca_certificate_file }} does not exist on the target."
        when: (on_box_data|bool == true)

      - name: Fail if ssl_ca certificate file does not exist locally
        fail:
          msg: "{{ ssl_ca_certificate_file }} does not exist on this machine."
        when: (on_box_data|bool == false)
      when: not ssl_ca_certificate_stat_result.stat.exists

    when: ssl_ca_certificate_file is defined and ssl_ca_certificate_file is not none

  delegate_to: "{{ inspection_target }}"
