---
#
# Copyright (c) 2022-2025 Wind River Systems, Inc.
#
# SPDX-License-Identifier: Apache-2.0
#
# SUB-TASKS DESCRIPTION:
#   Restore file from platform_backup.tgz.
#   Mainly /etc, /opt/platform/, and /home.

- block:
    - set_fact:
        restore_exclude_items: "{{ restore_exclude_items + upgrade_exclude_items.get(previous_software_version, []) }}"

    - name: Get current MACs sshd config
      command: grep '^MACs' /etc/ssh/sshd_config
      register: debian_sshd_macs
      when: previous_software_version == '21.12'

  when: upgrade_in_progress

- name: Add extra items to restore
  set_fact:
    full_restore_items: "{{ restore_items + restore_extra_items }}"

- name: Restore configuration files
  command: >-
    tar --use-compress-program=pigz -C / -xvpf {{ platform_backup_fqpn }} --overwrite
    {{ ' '.join(full_restore_items) }}
    {% for v in restore_exclude_items %}
    --exclude {{ v | quote }}
    {% endfor %}
  args:
    warn: false

- name: Restore patching data
  command: >-
    tar --use-compress-program=pigz -C / -xpf {{ patching_restore_data_file }} --overwrite
    opt/patching
  args:
    warn: false
  when: patching_restore_data_file is defined

- name: Check if /boot is present in the backup
  command:
    cmd: "tar --use-compress-program=pigz -tf '{{ platform_backup_fqpn }}' boot/"
  args:
    warn: false
  failed_when: false
  register: boot_backup_found

- name: Restore /boot from the backup
  command:
    cmd: "tar --use-compress-program=pigz -C / -xpf '{{ platform_backup_fqpn }}' boot/"
  args:
    warn: false
  when:
    - boot_backup_found.rc == 0
    - not upgrade_in_progress

- name: Migrate /boot from upgrade data
  block:
    - name: Save original kernel.env content
      command: cat /boot/1/kernel.env
      register: original_kernel_result

    - name: Restore /boot from the backup
      command:
        cmd: >-
          tar --use-compress-program=pigz -C / -xpf '{{ platform_backup_fqpn }}' --overwrite
          boot/1/kernel.env
          boot/efi/EFI/BOOT/boot.env
      args:
        warn: false

    - name: Update migrated kernel content
      replace:
        path: /boot/1/kernel.env
        regexp: "{{ item }}"
        replace: "{{ original_kernel_result.stdout | regex_search(item, multiline=true) }}"
      loop:
        - "^kernel=.*$"
        - "^kernel_rollback=.*$"

  when:
    - boot_backup_found.rc == 0
    - upgrade_in_progress

- name: Restore factory install files/directory
  block:
    - name: Check if /var/lib/factory-install was backed up
      shell: "tar --use-compress-program=pigz -tf {{ platform_backup_fqpn }} | grep 'var/lib/factory-install'"
      args:
        warn: false
      failed_when: false
      register: factory_install_dir_result

    - name: Restore factory install directory if present
      command: >-
        tar --use-compress-program=pigz -C / -xpf {{ platform_backup_fqpn }}
        --overwrite var/lib/factory-install
      args:
        warn: false
      when: factory_install_dir_result.rc == 0

    - name: Check if seed ISO rules were backed up
      shell: "tar --use-compress-program=pigz -tf {{ platform_backup_fqpn }} | grep 'etc/udev/rules.d/99-seediso.rules'"
      args:
        warn: false
      failed_when: false
      register: seed_iso_rules_result

    - name: Restore seed ISO rules if present
      command: >-
        tar --use-compress-program=pigz -C / -xpf {{ platform_backup_fqpn }}
        --overwrite etc/udev/rules.d/99-seediso.rules
      args:
        warn: false
      when: seed_iso_rules_result.rc == 0

- name: Check home dir for CentOS
  block:
    - name: Check if home was backed up
      shell: "tar --use-compress-program=pigz -tf {{ platform_backup_fqpn }} | grep -E '^home\\/'"
      args:
        warn: false
      failed_when: false
      register: home_dir_result

    - name: Restore home directory
      command: >-
        tar --use-compress-program=pigz
        --wildcards
        -C / -xpf {{ platform_backup_fqpn }}
        --exclude home/sysadmin/ansible.log
        --overwrite home/**/*
      args:
        warn: false
      when: home_dir_result.rc == 0

  when: previous_software_version == '21.12'

- name: Check home dir for Debian
  block:
    - name: Check if home was backed up
      shell: "tar --use-compress-program=pigz -tf {{ platform_backup_fqpn }} | grep 'var/home/'"
      args:
        warn: false
      failed_when: false
      register: home_dir_result

    - name: Restore home directory
      command: "tar --use-compress-program=pigz -C / -xpf {{ platform_backup_fqpn }} --overwrite var/home/"
      args:
        warn: false
      when: home_dir_result.rc == 0

  when: previous_software_version != '21.12'

- import_role:
    name: roles/bootstrap/prepare-env
    tasks_from: restore_prep_tasks.yml

- name: Migrate files and directories during upgrade
  block:
    - name: Migrate files to latest release
      replace:
        path: "{{ item.path }}"
        after: "{{ item.after }}"
        before: "{{ item.before|default('$') }}"
        regexp: "{{ item.regexp|default(previous_software_version) }}"
        replace: "{{ item.replace|default(software_version) }}"
      register: migrate_file
      failed_when: migrate_file.msg == ''
      when: previous_software_version in item.previous_software_version|default([previous_software_version])
      loop:
        - path: /etc/mtc.ini
          after: "keyring_directory *="
        - path: /etc/etcd/etcd.conf
          after: "ETCD_DATA_DIR="
        - path: /etc/etcd/etcd.yml
          after: "data-dir:"
        - path: /etc/lighttpd/lighttpd.conf
          after: "server.chroot +="
          regexp: '"/www"'
          replace: '"/var/www"'
          previous_software_version: ['21.12']

    - name: Migrate directories to latest release
      command: "mv {{ src | quote }} {{ dest | quote }}"
      loop:
        - /opt/platform/.keyring
      vars:
        src: "{{ item }}/{{ previous_software_version }}"
        dest: "{{ item }}/{{ software_version }}"

    # Shell required for wildcard
    - name: Fix host key permissions
      shell: chmod 600 /etc/ssh/ssh_host_*_key
      args:
        warn: false

    - name: Update values from CentOS with Debian's
      block:
        - name: Replace MACs from CentOS with Debian
          lineinfile:
            path: /etc/ssh/sshd_config
            regexp: "^MACs"
            line: "{{ debian_sshd_macs.stdout_lines[0] }}"

        - name: Replace sftp-server executable from CentOS path with Debian's
          lineinfile:
            path: /etc/ssh/sshd_config
            regexp: '^Subsystem\s+sftp\s+/usr/libexec/openssh/sftp-server'
            line: "Subsystem       sftp    /usr/lib/openssh/sftp-server"

      when: previous_software_version == '21.12'

  when: upgrade_in_progress
