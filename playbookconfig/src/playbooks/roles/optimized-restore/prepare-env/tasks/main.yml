---
#
# Copyright (c) 2022-2023 Wind River Systems, Inc.
#
# SPDX-License-Identifier: Apache-2.0
#
# ROLE DESCRIPTION:
#   Prepare environment for optimized restore.

- name: Set config path facts
  set_fact:
    keyring_permdir: "{{ platform_path + '/.keyring/' + software_version }}"
    config_permdir: "{{ platform_path + '/config/' + software_version }}"
    sysinv_permdir: "{{ platform_path + '/sysinv/' + software_version }}"
    puppet_permdir: "{{ platform_path + '/puppet/' + software_version }}"
    images_archive_dir: "/opt/platform-backup/{{ software_version }}"

- name: Set config path facts for restore
  set_fact:
    branding_permdir: "{{ config_permdir }}/branding"
    banner_permdir: "{{ config_permdir }}/banner/etc"
    ssh_config_permdir: "{{ config_permdir }}/ssh_config"
    pxe_config_permdir: "{{ config_permdir }}/pxelinux.cfg"
    fluxcd_permdir: "{{ platform_path }}/fluxcd/"
    helm_overrides_permdir: "{{ platform_path + '/helm/' + software_version }}"
    sysinv_config_permdir: "{{ platform_path + '/sysinv/' + software_version }}"

- name: Check if bootstrap_finalized flag exists on host
  stat:
    path: "{{ config_permdir }}/.bootstrap_finalized"
  register: bootstrap_finalized_flag

- name: Fail if host is unlocked or host configurations have already started
  fail:
    msg: Restore cannot be performed on deployed host, reinstall the system before trying again.
  when: bootstrap_finalized_flag.stat.exists

- name: Set restore file parameter
  set_fact:
    restore_data_file: "{{ target_backup_dir }}/{{ backup_filename }}"
  when: not upgrade_in_progress

- name: Set restore file parameter
  set_fact:
    platform_backup_fqpn: "{{ restore_data_file }}"
  when: upgrade_in_progress

- name: Set image backup filename
  block:
    - name: Copy backup_filename
      set_fact:
        tmp_filename: "{{ backup_filename }}"

    - name: Strip gpg extension when the backup_filename is encrypted
      set_fact:
        tmp_filename: "{{ tmp_filename | regex_replace('[.]gpg$') }}"
      when: backup_encryption_enabled|bool

    - name: Set image backup filename for user images method
      set_fact:
        registry_backup_filename: "{{ tmp_filename.replace(default_backup_mark, default_user_images_backup_mark) }}"
      when: restore_user_images

    - name: Set image backup filename for registry backup method
      set_fact:
        registry_backup_filename: "{{ tmp_filename.replace(default_backup_mark, default_registry_backup_mark) }}"
      when: restore_registry_filesystem

  when: not registry_backup_filename|default(none)

- name: Prepare for upgrade
  block:
    - name: Set upgrade facts
      set_fact:
        previous_software_version: "{{ upgrade_metadata.from_release }}"
        kubernetes_version: "{{ upgrade_k8s_version }}"

  when: upgrade_in_progress

- name: Non-upgrade path
  block:
    - name: Set previous software version for non-upgrade
      set_fact:
        previous_software_version: "{{ software_version }}"

  when: not upgrade_in_progress

- name: Check if the prestaged registry filesystem exists
  stat:
    path: "{{ images_archive_dir }}/local_registry_filesystem.tgz"
  register: prestage_registry_filesystem
