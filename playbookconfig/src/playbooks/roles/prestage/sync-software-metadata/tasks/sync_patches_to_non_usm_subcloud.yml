---
#
# Copyright (c) 2024 Wind River Systems, Inc.
#
# SPDX-License-Identifier: Apache-2.0
#
# ROLE DESCRIPTION:
#
#   This role is executed when there is no USM support, generally in subclouds that
#   have release N-1 but without USM support.
#   It is commonly executed after perform_full_ostree_dir_sync role, since
#   both share the N-1 configuration.
#   It is adapted to be able to carry out the upgrade from release N-1 without USM
#   support to release N, prestaging release N files to the subcloud.
#   The upgrade to release N cannot be carried out until the patch with USM support
#   is deployed in the subcloud. Once the patch with USM support is installed, the
#   deploy can be executed with the prestaged data.
#   The usm_enabled_on_subcloud variable must be set to false in order to execute
#   this role.
#

- name: Perform sync patches to non USM subcloud
  block:
  - debug:
      msg: The subcloud has N-1 release without USM support. Prestaging release {{ software_version }}

  # It's necessary to temporarily change the owner to sysadmin so that
  # the system controller can push the files to the subcloud, since the files
  # are in the folders only the root can access but the synchronize only
  # support passwordless sysadmin to execute ssh and rsync.
  - name: Temporarily change the ownership of {{ usm_software_dir }}
    file:
      path: "{{ usm_software_dir }}"
      state: directory
      owner: sysadmin
      recurse: yes

  - name: Ensure subcloud {{ usm_metadata_dir }}/available exists (sysadmin)
    file:
      path: "{{ usm_metadata_dir }}/available"
      owner: sysadmin
      group: root
      state: directory
      mode: 0755
      recurse: yes

  - name: Find deployed metadata files on system controller
    command: find {{ usm_metadata_dir }} -type f -name "*{{ software_version }}*"
    register: system_controller_metadata_files
    delegate_to: localhost

  - name: Copy system controller deployed metadata files as available state to subcloud
    copy:
      src: "{{ item }}"
      dest: "{{ usm_metadata_dir }}/available/{{ item | basename }}"
    with_items: "{{ system_controller_metadata_files.stdout_lines }}"

  # We want to transfer the rel-MM-mm directories that may exist in the system
  # controller to the subcloud. There will always be at least one, which corresponds
  # to the deployed base release, for example rel-24.09.0. This task should not fail,
  # if it fails the playbook should be aborted.
  - name: Copy system controller deployed release directory to subcloud
    synchronize:
      mode: "push"
      src: "{{ usm_software_dir }}/rel-{{ item }}"
      dest: "{{ usm_software_dir }}/"
      rsync_opts: "--delete"
    with_items: "{{ system_controller_releases }}"
    register: releases_transfer
    retries: 3
    delay: 2
    until: releases_transfer.rc == 0

  # We want to check if the software-script directory exists on the system controller
  # to ensure copying to the subcloud. This directory is created when a new patch is
  # deployed, so it does not exist if only the base release is deployed, for example
  # 24.09.0.
  - name: Check if {{ usm_software_scripts_dir }} directory exists
    stat:
      path: "{{ usm_software_scripts_dir }}"
    register: software_scripts_exists
    delegate_to: localhost

  # Only if the directory exists, it will be transferred to the subcloud.
  # We cannot deploy a patch if the directory does not exist, therefore the playbook
  # must abort if the transfer fails.
  - name: Copy system controller {{ usm_software_scripts_dir }} to subcloud
    synchronize:
      mode: "push"
      src: "{{ usm_software_scripts_dir }}"
      dest: "{{ usm_software_dir }}/"
      rsync_opts: "--delete"
    register: scripts_transfer
    retries: 3
    delay: 2
    until: scripts_transfer.rc == 0
    when: software_scripts_exists.stat.exists

  always:
    - name: Restore the ownership of {{ usm_software_dir }}
      file:
        path: "{{ usm_software_dir }}"
        state: directory
        owner: root
        recurse: yes
  become: true
