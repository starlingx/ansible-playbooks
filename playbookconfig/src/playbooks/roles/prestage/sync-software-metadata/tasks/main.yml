---
#
# Copyright (c) 2024-2025 Wind River Systems, Inc.
#
# SPDX-License-Identifier: Apache-2.0
#
# ROLE DESCRIPTION:
#
#   This role synchronizes the system controller /opt/software/metadata
#   directory and ostree repository to the subcloud.
#
#   We can divide this playbook into three files and few common tasks
#   that are necessary.
#   The description of each file is detailed in each of them.
#
#      Force ostree dir sync:
#         Includes the file perform_full_ostree_dir_sync.yml that is executed when
#         the flag force_ostree_dir_sync is set.
#         This is to ensure the existence of the release N ostree directory in an
#         N-1 subcloud.
#
#      Sync patches to USM enabled subcloud:
#         Includes the file sync_patches_to_usm_subcloud.yml that is executed when
#         the flag usm_enabled_on_subcloud is set.
#         This is to synchronize patch metadata and commits for an N or N-1 release.
#
#      Sync patches to non USM enabled subcloud
#         Includes the file sync_patches_to_non_usm_subcloud.yml that is executed when
#         the flag usm_enabled_on_subcloud is not set.
#         Having the ostree repository synchronized by role #1, now we need to transfer
#         the patch metadata files and scripts directories only if host is a non-USM
#         N-1 subcloud.
#

- name: Set software metadata synchronization facts for {{ software_version }}
  set_fact:
    ostree_sysroot_repo_dir: /sysroot/ostree/repo
    usm_scripts_dir: /usr/sbin/software-deploy
    ostree_rev: starlingx
    usm_software_dir: /opt/software
    usm_metadata_dir: /opt/software/metadata
    usm_software_scripts_dir: /opt/software/software-scripts
    tmp_metadata_dir: /opt/software/tmp
    tmp_metadata_sync_dir: /opt/software/tmp/metadata-sync
    ostree_metadata_commits_central: /opt/software/tmp/metadata-sync/ostree-metadata-commits.central
    ostree_metadata_commits_subcloud: /opt/software/tmp/metadata-sync/ostree-metadata-commits.subcloud

- name: Force ostree dir sync
  include_tasks: perform_full_ostree_dir_sync.yml
  when: force_ostree_dir_sync

# These tasks are common to use in the following tasks:
#   Sync patches to USM enabled subcloud
#   Sync patches to non USM enabled subcloud
#
- name: Gather system controller ostree commit
  command: ostree --repo={{ ostree_repo_release_feed }} rev-parse {{ ostree_rev }}
  register: ostree_commit_system_controller
  delegate_to: localhost

- name: Gather subcloud ostree commit
  command: ostree --repo={{ ostree_repo_release_feed }} rev-parse {{ ostree_rev }}
  register: ostree_commit_subcloud

- name: Gather software list for release {{ software_version }} deployed state
  shell: software list --release {{ software_version }} --state deployed | \
         grep {{ software_version }} | sed 's/ //g;'
  register: system_controller_software_list_deployed
  delegate_to: localhost

- name: Override software list if software version {{ software_version }} is an N-1 release
  shell: software list --release {{ software_version }} | \
         grep {{ software_version }} | sed 's/ //g;'
  register: system_controller_software_list_override
  delegate_to: localhost
  when:
    - software_version is version(system_controller_current_sw_version.stdout, '<')
    - prestage_source == 'local'

# For prestage for-sw-deploy we don't want to prestage an N-1 release to an N subcloud
- name: Fail if prestage software version is lower than current subcloud software version
  fail:
    msg: >-
      The specified software version {{ software_version }} is lower than the
      current subcloud software version {{ host_software_version }}.
      Please provide a valid software version for prestaging.
  when:
    - software_version is version(host_software_version, '<')
    - prestage_source == 'remote'

# If the software_version is an N-1 release and there is no software found
# for that release, we should fail the playbook.
- name: Fail if no software found for N-1 release
  fail:
    msg: >-
      No software found for N-1 release version {{ software_version }}.
      Please provide a valid software version for prestaging.
  when:
    - system_controller_software_list_override.skipped is not defined
    - (system_controller_software_list_override.stdout_lines | default([]) | length) == 0

- name: Build system controller software list for release {{ software_version }}
  set_fact:
    system_controller_software_list:
      stdout_lines: >-
        {{ (system_controller_software_list_override.stdout_lines
             if (system_controller_software_list_override is defined
                 and system_controller_software_list_override.stdout_lines is defined)
             else system_controller_software_list_deployed.stdout_lines) }}

- name: Show system controller software list for release {{ software_version }}
  debug:
    var: system_controller_software_list.stdout_lines

- name: Extract release part from system controller release list
  set_fact:
    system_controller_releases: "{{ system_controller_software_list.stdout_lines | \
    map('regex_replace', '.*?-([0-9\\.]+).*', '\\1') | list }}"

- name: Sync patches to USM enabled subcloud
  include_tasks: sync_patches_to_usm_subcloud.yml
  when: usm_enabled_on_subcloud

- name: Sync patches to non USM enabled subcloud
  include_tasks: sync_patches_to_non_usm_subcloud.yml
  when: not usm_enabled_on_subcloud
