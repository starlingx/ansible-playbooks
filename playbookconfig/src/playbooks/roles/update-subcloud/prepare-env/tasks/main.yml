---
#
# Copyright (c) 2023 Wind River Systems, Inc.
#
# SPDX-License-Identifier: Apache-2.0
#   This role is to check the target host environment before proceeding to
#   the next step.
#

- name: Get subcloud active controller
  shell: |
    source /etc/platform/openrc
    system host-show $(cat /etc/hostname) --column hostname --format value
  register: controller_name

- name: Set subcloud floating address fact
  # Interested only in primary address in case of dual-stack,
  # as subcloud to system controller route is through primary.
  set_fact:
    sc_floating_address: "{{ sc_floating_address.split(',')[0] }}"

- name: Retrieve software version number
  # lookup module does not work with /etc/build.info as it does not have ini
  # format. Resort to shell source.
  shell: source /etc/build.info; echo $SW_VERSION
  register: sw_version_result

- name: Fail if software version is not defined
  fail:
    msg: "SW_VERSION is missing in /etc/build.info"
  when: sw_version_result.stdout_lines|length == 0

- name: Retrieve system mode
  shell: source /etc/platform/platform.conf; echo $system_mode
  register: system_mode_result

- name: Fail if system mode is not defined
  fail:
    msg: "system_mode is missing in /etc/platform/platform.conf"
  when: system_mode_result.stdout_lines|length == 0

- name: Set host software version, system mode
  set_fact:
    software_version: "{{ sw_version_result.stdout }}"
    system_mode: "{{ system_mode_result.stdout }}"

- name: Set config path fact
  set_fact:
    config_permdir: "{{ platform_path + '/config/' + software_version }}"

- name: Set the management and admin network types
  set_fact:
    mgmt_net: "mgmt"
    admin_net: "admin"

- name: Get target subcloud address pool uuid
  shell: >-
    source /etc/platform/openrc; system addrpool-list |
    awk '$14 == "{{ sc_floating_address }}" {print $2}'
  register: target_address_pool

- name: Fail if the subcloud has no compatible address pool
  fail:
    msg: "No address pool found with floating address {{ sc_floating_address }}"
  when: target_address_pool.stdout == ""

- name: Get target network type for subcloud address pool
  shell: >-
    source /etc/platform/openrc; system network-list |
    grep "{{ target_address_pool.stdout }}" | awk '{print $8}'
  register: target_net_type

- name: Fail if subcloud network is not assigned to an address pool
  fail:
    msg: "No network is assigned to address pool {{ target_address_pool.stdout }}"
  when: target_net_type.stdout == ""

- name: Set the target network type variable
  set_fact:
    target_net: "{{ target_net_type.stdout }}"

- name: Get target network name for subcloud address pool
  shell: >-
    source /etc/platform/openrc; system network-list |
    grep "{{ target_address_pool.stdout }}" | awk '{print $6}'
  register: target_net_name

- name: Get ifname of the target subcloud network of controller-0
  shell: >-
    source /etc/platform/openrc; system interface-network-list controller-0 |
    awk '$8 == "{{ target_net_name.stdout }}" { print $6 }'
  register: controller_0_sc_network_if

- name: Fail if subcloud network interface of controller-0 is not assigned
  fail:
    msg: "No interface is assigned to {{ target_net_name.stdout }} on controller-0"
  when: controller_0_sc_network_if.stdout == ""

- name: Set sc_if_c0 fact
  set_fact:
    sc_if_c0: "{{ controller_0_sc_network_if.stdout_lines[0] }}"

- name: Get admin address pool uuid if it exists
  shell: >-
    source /etc/platform/openrc; system network-list |
    awk '$8 == "{{ admin_net }}" { print $12 }'
  register: admin_addrpool_uuid

- name: Set admin_addrpool fact
  set_fact:
    admin_addrpool: "{{ admin_addrpool_uuid.stdout }}"

- name: Set admin_addrpool_secondary fact
  include_role:
    name: common/get-admin-addrpool-secondary

- block:
  - name: Get ifname of the existing subcloud network of controller-1
    shell: >-
      source /etc/platform/openrc; system interface-network-list controller-1 |
      awk '$8 == "{{ target_net_name.stdout }}" { print $6 }'
    register: controller_1_sc_network_if

  - name: Fail if subcloud network interface of controller-1 is not assigned
    fail:
      msg: "No interface is assigned to {{ target_net }} on controller-1"
    when: controller_1_sc_network_if.stdout == ""

  - name: Set sc_if_c1 fact
    set_fact:
      sc_if_c1: "{{ controller_1_sc_network_if.stdout_lines[0] }}"

  when: system_mode != "simplex"
