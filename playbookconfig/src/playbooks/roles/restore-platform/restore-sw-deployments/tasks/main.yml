---
#
# Copyright (c) 2024-2025 Wind River Systems, Inc.
#
# SPDX-License-Identifier: Apache-2.0
#
# SUB-TASKS DESCRIPTION:
#   These tasks perform following activities:
#       - Verify if the original base OSTree commit from backup matches current OSTree commit
#       - Extract and reapply all software deployments from backup
#       - Reboot the controller if the patching requires it
#

- name: Exclude patches on AIO-SX by default
  set_fact:
    exclude_sw_deployments: "{{ system_mode == 'simplex' and system_type == 'All-in-one' }}"
  when: exclude_sw_deployments is not defined

- name: Check if software deployments restore is already in progress
  stat:
    path: "{{ restore_patching_in_progress_flag }}"
  register: in_progress_flag

- name: Check if software deployments restore is marked RR
  stat:
    path: "{{ restore_patching_rr_flag }}"
  register: rr_flag

- name: Check if software deployments restore is already complete
  stat:
    path: "{{ restore_patching_complete_flag }}"
  register: complete_flag

- name: Fail if software deployments restore is already in progress
  fail:
    msg: |
      Software deployments restore is already in progress.

      It is recommended to reinstall the system before reattempting.
  when:
    - in_progress_flag.stat.exists
    - not rr_flag.stat.exists

- name: Restore software deployments
  block:
    - name: Gather software deployments information
      script: "get_sw_deployments_info.py {{ restore_data_file | quote }}"
      register: sw_deployments_info_result

    - name: Normalize facts
      set_fact:
        sw_deployments_info: "{{ _sw_deployments_info }}"
        sw_deployments_enabled: "{{ _sw_deployments_info.backup_patched }}"
        do_sw_deployments_prepare: "{{ not in_progress_flag.stat.exists }}"
        do_sw_deployments_restore: "{{ _sw_deployments_info.target_release_id is not none }}"
        do_sw_deployments_begin: "{{ not rr_flag.stat.exists }}"
        do_sw_deployments_end: true
        do_sw_deployments_reboot: >-
          {{
            not rr_flag.stat.exists and (
              sw_deployments_force_reboot|bool or _sw_deployments_info.target_reboot_required|bool
            )
          }}
      vars:
        _sw_deployments_info: "{{ sw_deployments_info_result.stdout | from_json }}"

    - name: Display software deployments information from backup
      debug:
        msg: |
          Restore software deployments enabled: {{ sw_deployments_enabled }}

          Software deployments data:
            {{ sw_deployments_info | to_nice_yaml | indent(2) }}

    - name: Restore software deployments
      include_tasks: restore.yml
      when: sw_deployments_enabled|bool

  when:
    - not exclude_sw_deployments|bool
    - not complete_flag.stat.exists
