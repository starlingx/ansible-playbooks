---
#
# Copyright (c) 2024 Wind River Systems, Inc.
#
# SPDX-License-Identifier: Apache-2.0
#
#   This role patches a standalone subcloud being enrolled by finding the
#   patch level difference between the subcloud and the
#   system controller, determining required/dependent patches, staging
#   them, and using USM local installation to deploy them.
#
#   Role outline:
#   - Compare SW_VERSION between system controller and subcloud
#   - Retrieve subcloud software releases, determine patch level
#   - Retrieve system controller releases for subcloud's SW_VERSION
#     and determine patch level
#   - Diff system controller and subcloud patch levels
#   - Bring subcloud to target patch level (system controller's level):
#     - Determine dependent patches
#     - Set releases_to_apply: gather patch IDs, remove already applied
#       patches on subcloud from list
#     - Stage patches from dc-vault
#     - Initiate usm-deploy-releases role
#

- name: Check if the controller is active controller
  shell: source /etc/platform/openrc
  register: active_controller
  failed_when: false

- set_fact:
    is_active_controller: >-
      {{ true if 'stdout' in active_controller and active_controller.stdout
      | length == 0 else false }}

- name: Fail if not active controller
  fail:
    msg: "Subcloud enrollment cannot be done on non-active controller."
  when: not is_active_controller

- name: Run software deploy show
  shell: |
    source /etc/platform/openrc
    software deploy show
  register: check_deploy_show
  failed_when: false

- name: Ensure no deploy in progress
  fail:
    msg: |
      Software deployment already in progress:
      {{ check_deploy_show.stdout }}
      Existing release deployment found. Retry after confirming no
      subcloud software update is in progress, ensure that the deployment
      is complete and deleted. If the deployment failed, manually roll back the
      software update and resolve the deployment error before retrying.
      For more details, see /var/log/software.log.
  when: '"No deploy in progress" not in check_deploy_show.stdout'

- name: Retrieve SW_VERSION on system controller
  shell: source /etc/build.info; echo $SW_VERSION
  register: sw_version_system_controller
  delegate_to: localhost

- name: Retrieve SW_VERSION on subcloud
  shell: source /etc/build.info; echo $SW_VERSION
  register: sw_version_subcloud

# TODO(srana): This restriction should be removed in the future
- name: Ensure system controller and subcloud are at the same major release
  fail:
    msg: |
      Major software versions do not match.
      System controller: {{ sw_version_system_controller.stdout }},
      Subcloud: {{ sw_version_subcloud.stdout }}
  when: sw_version_system_controller.stdout != sw_version_subcloud.stdout

- name: Retrive subcloud software list raw output
  shell: |
    source /etc/platform/openrc
    software list --release {{ sw_version_subcloud.stdout }}
  register: subcloud_software_list_raw

- name: Retrive system controller software list raw output
  shell: |
    source /etc/platform/openrc
    software list --release {{ sw_version_subcloud.stdout }}
  register: system_controller_software_list_raw
  delegate_to: localhost

# Note: We strip out the component from release string (fromat: component-MM.mm.pp)
- name: Retrieve deployed subcloud software release list
  shell: |
    echo -e "{{ subcloud_software_list_raw.stdout }}" | \
      grep {{ sw_version_subcloud.stdout }} | \
      grep -E '(deployed|committed)' | \
      awk '{print $2}' | \
      awk -F'-' '{print $NF}'
  register: subcloud_software_list

- name: Determine subcloud release {{ sw_version_subcloud.stdout }} patch level
  shell: |
    echo -e "{{ subcloud_software_list.stdout_lines | join('\n') }}" | \
      sort -V | \
      tail -n 1
  register: subcloud_patch_level

# Note: We strip out the component from release string (fromat: component-MM.mm.pp)
- name: Retrieve deployed system controller sofware release list for {{ sw_version_subcloud.stdout }}
  shell: |
    echo -e "{{ system_controller_software_list_raw.stdout }}" | \
      grep {{ sw_version_subcloud.stdout }} | \
      grep -E '(deployed|committed)' | \
      awk '{print $2}' | \
      awk -F'-' '{print $NF}'
  register: system_controller_software_list
  delegate_to: localhost

- name: Determine system controller release {{ sw_version_subcloud.stdout }} patch level
  shell: |
    echo -e "{{ system_controller_software_list.stdout_lines | join('\n') }}" | \
      sort -V | \
      tail -n 1
  register: system_controller_patch_level
  delegate_to: localhost

# Task to convert version # to an int for comparsion. For example, 24.09.01 -> 240901
- name: Convert version numbers to integers
  set_fact:
    system_controller_patch_int: |
      {{ system_controller_patch_level.stdout | replace('.', '') | int }}
    subcloud_patch_int: |
      {{ subcloud_patch_level.stdout | replace('.', '') | int }}

- name: Print task results and variables
  debug:
    msg: |
      System Controller Software List:
      {{ system_controller_software_list_raw.stdout }}
      Subcloud Software List:
      {{ subcloud_software_list_raw.stdout }}
      SW Version on System Controller: {{ sw_version_system_controller.stdout }}
      SW Version on Subcloud: {{ sw_version_subcloud.stdout }}
      Subcloud Software Release List: {{ subcloud_software_list.stdout_lines | join(', ') }}
      Subcloud Patch Level: {{ subcloud_patch_level.stdout }}
      System Controller Software Release List: {{ system_controller_software_list.stdout_lines | join(', ') }}
      System Controller Patch Level: {{ system_controller_patch_level.stdout }}
      System Controller Patch Level (Integer): {{ system_controller_patch_int }}
      Subcloud Patch Level (Integer): {{ subcloud_patch_int }}

- name: |
    Bring the subcloud patch level {{ subcloud_patch_level.stdout }} to the
    system controller's patch level {{ system_controller_patch_level.stdout }}
  block:
    # The system_controller_patch_level with component string
    - name: Gather release id for target patch
      shell: |
        echo -e "{{ system_controller_software_list_raw.stdout }}" | \
          grep -E '(deployed|committed)' | \
          grep {{ system_controller_patch_level.stdout }} | \
          awk '{print $2}'
      register: target_release_id
      delegate_to: localhost

    # Parses the "software show <release>" requires section
    - name: Determine dependent patches for {{ target_release_id.stdout }}
      shell: |
        software show {{ target_release_id.stdout }} | \
          awk '/\| requires/{flag=1} flag' | \
          grep -oE '[^[:space:]]+-[0-9.]+' | \
          cat
      register: dependent_patches
      delegate_to: localhost

    - name: Set releases_to_apply and patches source dir
      set_fact:
        releases_to_apply: "{{ dependent_patches.stdout_lines + [target_release_id.stdout] }}"
        patches_source_dir: "/opt/dc-vault/software/{{ sw_version_subcloud.stdout }}"
        patch_file_id_dict: { } # Map release ids to patch files

    - name: Gather ids for already applied releases on subcloud
      shell: |
        echo -e "{{ subcloud_software_list_raw.stdout }}" | \
          grep {{ sw_version_subcloud.stdout }} | \
          grep -E '(deployed|committed)' | \
          awk '{print $2}'
      register: subcloud_software_list_ids

    - name: Remove already applied patches on subcloud from list of releases_to_apply
      set_fact:
        releases_to_apply: |
          {{ releases_to_apply | difference(subcloud_software_list_ids.stdout_lines) }}

    - name: Gather patch files from dc-vault
      find:
        paths: "{{ patches_source_dir }}"
        patterns: "*.patch"
      register: patch_files
      delegate_to: localhost

    # Extract release id from patch metadata <id> tag
    - name: Identify the releases associated with the patch files
      shell: |
        tar -xOf {{ item.path }} metadata.tar | \
        tar -xOf - metadata.xml | \
        grep -oP '(?<=<id>).*?(?=</id>)'
      register: patch_metadata
      loop: "{{ patch_files.files }}"
      delegate_to: localhost
      args:
        # Suppress warning suggesting the use of the "unarchive" module.
        # Using shell for this specific task is more appropriate.
        # The "unarchive" module offers no benefits here, it adds unnecessary
        # complexity and tasks, so 'warn: false' is added to suppress
        # the warning message.
        warn: false

    # Note: Duplicate keys are not an issue.
    # Multiple patch files with the same id but different names simply
    # indicate that these files are duplicates with different filenames.
    - name: Create release id to patch file mapping
      set_fact:
        patch_file_id_dict: "{{ patch_file_id_dict | combine({ item.stdout: item.item.path }) }}"
      when: item.stdout is defined and item.stdout | length > 0
      loop: "{{ patch_metadata.results }}"

    - name: Print patch_file_id_dict
      debug:
        var: patch_file_id_dict

    - name: Fail if patch files not found
      assert:
        that:
          - item in patch_file_id_dict
        fail_msg: |
          Patch file for {{ item }} is missing on the system
          controller in {{ patches_source_dir }}. Please ensure the
          patch file is present (uploade to dc-vault) and retry.
      loop: "{{ releases_to_apply }}"

    - name: Create a tmp directory to stage patches on subcloud
      tempfile:
        state: directory
        prefix: enroll_patches_
        # The default /tmp directory may not have sufficient space for large patches.
        # The created directory is cleaned up by the always block below.
        path: /scratch
      register: patches_stage_dir

    - name: Copy patch files from system controller to subcloud
      copy:
        src: "{{ patch_file_id_dict[item] }}"
        dest: "{{ patches_stage_dir.path }}/{{ item }}.patch"
      loop: "{{ releases_to_apply }}"
      vars:
        # The ansible_remote_tmp directory is used as a staging area to
        # transfer files. The default location, /tmp, may not have
        # sufficient space for transfers.
        ansible_remote_tmp: /scratch

    - name: Print gathered values before deploying patches
      debug:
        msg: |
          Target Release ID: {{ target_release_id.stdout }}
          Dependent Patches: {{ dependent_patches.stdout_lines | join(', ') }}
          Releases to Apply: {{ releases_to_apply | join(', ') }}
          Patches Source Directory: {{ patches_source_dir }}
          Patches Stage Directory: {{ patches_stage_dir.path }}
          Subcloud Software List IDs: {{ subcloud_software_list_ids.stdout_lines | join(', ') }}

    - name: Deploy Releases
      include_role:
        name: common/usm-deploy-releases
      vars:
        releases: "{{ releases_to_apply }}"
        patches_dir: "{{ patches_stage_dir.path }}"
        release_id: "{{ target_release_id.stdout }}"
        release_version: "{{ system_controller_patch_level.stdout }}"

  when: system_controller_patch_int > subcloud_patch_int

  always:
    - name: Clean up the tmp stage directory
      file:
        path: "{{ patches_stage_dir.path }}"
        state: absent
      when: patches_stage_dir is defined and patches_stage_dir.path is defined
