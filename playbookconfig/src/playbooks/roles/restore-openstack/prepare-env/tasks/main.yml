---
#
# Copyright (c) 2019-2022 Wind River Systems, Inc.
#
# SPDX-License-Identifier: Apache-2.0
#
# ROLE DESCRIPTION:
#   This role verifies if platform restore should proceed
#
- name: Perform generic user input validation for restore
  import_role:
    name: backup-restore/validate-input

- name: Perform generic B&R environment validation
  import_role:
    name: backup-restore/prepare-env

- name: Check if restoring OpenStack application is already in progress
  stat:
    path: "{{ restore_openstack_in_progress_flag }}"
  register: restore_openstack_in_progress

- name: Fail if restoring OpenStack application is already in progress
  fail:
    msg: "Restoring OpenStack application is already in progress!"
  when: restore_openstack_in_progress.stat.exists

- name: Check if it is the active controller
  shell: source /etc/platform/openrc; system host-show $(cat /etc/hostname) --column capabilities --format value
         | grep -i "Controller-Active"
  register: active_ctlr

- name: Fail if it is not the active controller
  fail:
    msg: "Restore OpenStack application can only be done on the active controller."
  when: active_ctlr.rc != 0

- name: Search for openstack application
  shell: source /etc/platform/openrc; system application-show {{ openstack_app_name }} --column status --format value
  register: check_openstack
  failed_when: false

# If OpenStack application doesn't exist or is in applied state, the restore is complete.
- block:
  - debug:
      msg: >-
        Either OpenStack application had not been applied when the system was
        backed up or it has already been restored successfully.
  - meta: end_play

  when: check_openstack.rc != 0 or check_openstack.stdout == "applied"

# If OpenStack application is not in uploaded state, it means restore_openstack playbook
# has been run and was not successful. Re-run the playbook is not supported.
- name: Fail if OpenStack application is not in the right state for restore
  fail:
    msg: >-
      OpenStack application must be in ‘uploaded’ state for the restore to proceed.
      The restore must have failed already.
  when: check_openstack.stdout != "uploaded"

- name: Look for the flag indicating that Ceph is configured
  stat:
    path: "/etc/platform/.node_ceph_configured"
  register: ceph_backend

- name: Look for the flag indicating that Rook is configured
  stat:
    path: "/etc/platform/.node_rook_configured"
  register: rook_backend

- block:
  - name: Check if platform-integ-apps was applied successfully during controller-0 unlock
    shell: >-
      source /etc/platform/openrc; system application-show platform-integ-apps --column status --format value
    register: check_platform_integ

  - name: Fail if platform-integ-apps was not applied successfully
    fail:
      msg: Application platform-integ-apps was not applied successfully during controller-0 unlock
    when: check_platform_integ.stdout not in ['applied', 'completed']
  when: ceph_backend.stat.exists

- block:
  - name: Check if rook-ceph was applied successfully during controller-0 unlock
    shell: >-
      source /etc/platform/openrc; system application-show rook-ceph --column status --format value
    register: check_rook_ceph

  - name: Fail if rook-ceph was not applied successfully
    fail:
      msg: Application rook-ceph was not applied successfully during controller-0 unlock
    when: check_rook_ceph.stdout not in ['applied', 'completed']
  when: rook_backend.stat.exists

- name: Transfer backup tarball to target if the file is off-box
  include_role:
    name: backup-restore/transfer-file
  when: on_box_data|bool == false

- name: Copy the backup tarball to {{ target_backup_dir }} if the file is already on-box
  copy:
    src: "{{ initial_backup_dir }}/{{ backup_filename }}"
    dest: "{{ target_backup_dir }}"
    remote_src: yes
  when: on_box_data|bool == true
  become: yes
  become_user: root
